{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "Tom Casavant",
	"language": "en",
	"home_page_url": "https://tomcasavant.com/",
	"feed_url": "https://tomcasavant.com/feed.json",
	"description": "Blog about things",
	"author": {
		"name": "Tom Casavant",
		"url": "https://tomcasavant.com/about-me/"
	},
	"items": [
		{
			"id": "https://tomcasavant.com/blogrolls-on-blogrolls-on-blogrolls/",
			"url": "https://tomcasavant.com/blogrolls-on-blogrolls-on-blogrolls/",
			"title": "Blogrolls on Blogrolls on Blogrolls",
			"content_html": "<h1 id=\"blogs\" tabindex=\"-1\">Blogs <a class=\"header-anchor\" href=\"https://tomcasavant.com/blogrolls-on-blogrolls-on-blogrolls/\">#</a></h1>\n<p>I enjoy reading blogs. Unfortunately, discovering blogs isn't exactly the easiest thing to do, most of the ones I've subscribed to after finding the authors on Twitter (formerly), The Fediverse, Flipboard, and other social platforms.\nA lot of the mainstream platforms tend to downrank links and there are not many platforms the open social web known for discoverability (yet).</p>\n<p>One possible option is to just search for them. <a href=\"https://search.marginalia.nu/\">Marginalia</a>, for example, is a search engine that lets you easily find content across the indieweb.</p>\n<p>And another option is the Blogroll.</p>\n<h2 id=\"blogrolls\" tabindex=\"-1\">Blogrolls <a class=\"header-anchor\" href=\"https://tomcasavant.com/blogrolls-on-blogrolls-on-blogrolls/\">#</a></h2>\n<p>The idea behind blogrolls is very simple: share the rss feeds you enjoy reading, forming a sort of <a href=\"https://bentsai.org/posts/my-recommendation-engine\">recommendation engine</a>.</p>\n<p>If I enjoy reading a blog the best way to find out what other blogs to read is to figure out what that author reads and read that.</p>\n<h2 id=\"blogrolls-on-blogroll\" tabindex=\"-1\">Blogrolls on Blogroll <a class=\"header-anchor\" href=\"https://tomcasavant.com/blogrolls-on-blogrolls-on-blogrolls/\">#</a></h2>\n<p>It stands to reason that I might also enjoy reading the blogs recommended by those blogs that were recommended by the authors I read.</p>\n<p>Unfortunately, at this point there are quite a lot of blogs adding up.\nIf I follow 5 blogs and each of them follow 5 blogs we're up to 25 new blogs, if each of those recommend 5 unique blogs we're up to 150 new feeds.</p>\n<p>So let's just use a quick script to scan the blogs I follow to extract all their blogrolls.</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Feed</span><span class=\"token punctuation\">:</span>\n    url<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    feed<span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span>\n    blogroll<span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>url <span class=\"token operator\">=</span> url\n        <span class=\"token comment\"># URL is an xml/rss url</span>\n        self<span class=\"token punctuation\">.</span>feed <span class=\"token operator\">=</span> feedparser<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>blogroll <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find_blogroll<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">find_blogroll</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Checking </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">}</span></span><span class=\"token string\"> for blogroll link'</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># Check if blogroll link is in RSS/XML feed</span>\n        <span class=\"token keyword\">if</span> <span class=\"token string\">'source_blogroll'</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>feed<span class=\"token punctuation\">.</span>feed<span class=\"token punctuation\">:</span>\n            blogroll_url <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>feed<span class=\"token punctuation\">.</span>feed<span class=\"token punctuation\">[</span><span class=\"token string\">'source_blogroll'</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> blogroll_url<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                blogroll_url <span class=\"token operator\">=</span> urllib<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">.</span>urljoin<span class=\"token punctuation\">(</span>base_url<span class=\"token punctuation\">,</span> blogroll_url<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> Blogroll<span class=\"token punctuation\">(</span>blogroll_url<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># If not found in feed, check the HTML of the base_url</span>\n        base_url <span class=\"token operator\">=</span> urllib<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">.</span>urlparse<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>scheme <span class=\"token operator\">+</span> <span class=\"token string\">'://'</span> <span class=\"token operator\">+</span> urllib<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">.</span>urlparse<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>netloc\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Blogroll not in RSS feed, try checking meta tags at </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>base_url<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>base_url<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">!=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n\n            soup <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">'html.parser'</span><span class=\"token punctuation\">)</span>\n            blogroll_link <span class=\"token operator\">=</span> soup<span class=\"token punctuation\">.</span>find_all<span class=\"token punctuation\">(</span><span class=\"token string\">'link'</span><span class=\"token punctuation\">,</span> rel<span class=\"token operator\">=</span><span class=\"token string\">'blogroll'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> blogroll_link<span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># Blogroll URL may be relative or absolute</span>\n                blogroll_url <span class=\"token operator\">=</span> blogroll_link<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'href'</span><span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> blogroll_url<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    blogroll_url <span class=\"token operator\">=</span> urllib<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">.</span>urljoin<span class=\"token punctuation\">(</span>base_url<span class=\"token punctuation\">,</span> blogroll_url<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> Blogroll<span class=\"token punctuation\">(</span>blogroll_url<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No blogroll found\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></code></pre>\n<p>I'm not sure if there are situations where the blogroll reference shows up in the <code>&lt;link&gt;</code> tag but NOT in the rss feed (or vice-versa), so I added in a check for both.</p>\n<p>So now we just loop through all the new feeds and discover their blogrolls.</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Blogroll</span><span class=\"token punctuation\">:</span>\n    url<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    opml<span class=\"token punctuation\">:</span> SuperDict <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    feeds<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>Feed<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>url <span class=\"token operator\">=</span> url\n        self<span class=\"token punctuation\">.</span>opml <span class=\"token operator\">=</span> lp<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_feeds</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>feeds <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>feeds <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>set_feeds<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>feeds\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">set_feeds</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        feeds <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> feed <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>opml<span class=\"token punctuation\">.</span>feeds<span class=\"token punctuation\">:</span>\n            feeds<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>Feed<span class=\"token punctuation\">(</span>feed<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> feeds\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_blogroll_tree</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> depth<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> max_depth<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> feed_scores<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Loop through all feeds in blogroll, find their blogrolls and associated feeds.</span>\n        <span class=\"token keyword\">if</span> depth <span class=\"token operator\">==</span> max_depth<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            blogroll_tree <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">for</span> feed <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>get_feeds<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> feed<span class=\"token punctuation\">.</span>url <span class=\"token keyword\">in</span> feed_scores<span class=\"token punctuation\">:</span>\n                    feed_scores<span class=\"token punctuation\">[</span>feed<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>depth<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token comment\"># Feed already in blogroll tree, no need to search again</span>\n                    feed_scores<span class=\"token punctuation\">[</span>feed<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>depth<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                    blogroll <span class=\"token operator\">=</span> feed<span class=\"token punctuation\">.</span>blogroll\n                    <span class=\"token keyword\">if</span> blogroll<span class=\"token punctuation\">:</span>\n                        blogroll_tree<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>blogroll<span class=\"token punctuation\">.</span>get_blogroll_tree<span class=\"token punctuation\">(</span>depth <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> max_depth<span class=\"token punctuation\">,</span> feed_scores<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>feed_scores<span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">return</span> blogroll_tree</code></pre>\n<h2 id=\"blogrolls-on-blogrolls-on-blogrolls\" tabindex=\"-1\">Blogrolls on Blogrolls on Blogrolls <a class=\"header-anchor\" href=\"https://tomcasavant.com/blogrolls-on-blogrolls-on-blogrolls/\">#</a></h2>\n<p>As you can see in the above code, I've added a few arguments to our get_blogroll_tree() function.\nIf I assume I'll enjoy the blogs that the people I read recommend, and then to a lesser extent the blogs that are recommended on those blogs, then it follows that I might also enjoy the blogs that are recommended by the blogs that are recommended by the blogs I enjoy.</p>\n<p>So we plug in a depth to our blogroll tree to specify how many blogs should be searched. (if I plug in 0, only my blog shows up. If I plug in 1 the blogs I recommend will appear. 2, the blogs that those blogs recommend will appear and so on)</p>\n<p>Finally, we can assign a score to these blogs to find which ones I might most like to read. If we assume that as we get longer branches to the blogroll tree the content on the blogs further out will be</p>\n<h2 id=\"further-exploration\" tabindex=\"-1\">Further Exploration <a class=\"header-anchor\" href=\"https://tomcasavant.com/blogrolls-on-blogrolls-on-blogrolls/\">#</a></h2>\n<p>Having a bunch of RSS feeds is only useful if I can read them. I've got a <a href=\"https://www.freshrss.org/\">FreshRSS</a> feed aggregator running on my server, which opens up a GReader API.\nUsing that API we can take all our new feeds and add it to a specific category on FreshRSS to be browsed at my leisure.</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">GReader</span><span class=\"token punctuation\">:</span>\n    url<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    api_key<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> api_key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>url <span class=\"token operator\">=</span> url\n        self<span class=\"token punctuation\">.</span>api_key <span class=\"token operator\">=</span> api_key\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">add_feed</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> feed<span class=\"token punctuation\">:</span> Feed<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'Authorization'</span><span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'Bearer auth=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>api_key<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'application/x-www-form-urlencoded'</span>\n        <span class=\"token punctuation\">}</span>\n        data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'ac'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'subscribe'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'s'</span><span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"feed/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>feed<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'user/-/label/'</span> <span class=\"token operator\">+</span> category\n        <span class=\"token punctuation\">}</span>\n\n        response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">)</span>\n        response<span class=\"token punctuation\">.</span>raise_for_status<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p><a href=\"https://github.com/TomCasavant/Blogroll-Discovery\">Source Code for the Blogroll Discovery Script</a></p>\n<p>The reason I started exploring this was a discussion on <a href=\"https://github.com/ckolderup/postmarks\">Postmarks</a> about <a href=\"https://github.com/ckolderup/postmarks/issues/140\">user discovery in the fediverse</a>. Mastodon still technically has a feature where users can <a href=\"https://docs.joinmastodon.org/user/discoverability/\">promote other profiles</a>, though it seems to have dropped the UI for that\nso it's not clear if it's going to stick around. But if it gets <a href=\"https://github.com/mastodon/mastodon/issues/19655\">federated alongside profiles</a> it would have the potential of bringing easy blogroll-like functionality to the social web.</p>\n<hr>\n<h3 id=\"further-reading\" tabindex=\"-1\">Further Reading <a class=\"header-anchor\" href=\"https://tomcasavant.com/blogrolls-on-blogrolls-on-blogrolls/\">#</a></h3>\n<p>If you expand on the above code you can map out the <a href=\"https://alexsci.com/rss-blogroll-network/\">entire blogroll network</a></p>\n<p><a href=\"https://box464.com/posts/mastodon-featured-profiles/\">Mastodon Featured Profiles</a></p>\n<p><a href=\"https://blogroll.org/what-are-blogrolls/\">What are blogrolls</a></p>\n<p><a href=\"https://browse.blogroll.social/?id=27\">Blogroll Viewier</a></p>\n",
			"date_published": "2024-07-13T14:00:00Z"
		}
		,
		{
			"id": "https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/",
			"url": "https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/",
			"title": "2,904 Hours Later: A Pokémon Saga",
			"content_html": "<p><a href=\"https://tomkahe.com/@pokemon\"><img src=\"https://fedi-badge.deno.dev/@pokemon@tomkahe.com/followers.svg?style=plastic\" alt=\"Follow @pokemon@tomkahe.com\"></a></p>\n<p>On February 10th, almost entirely because I found a <a href=\"https://github.com/Baekalfen/PyBoy\">repo</a> that lets you interface with gameboy and gameboy color games via python, I launched a <a href=\"https://github.com/TomCasavant/MastodonPlaysGameboy\">bot that lets you play pokemon</a> by voting in polls in the social web.</p>\n<p>At first I looked around for an easy way to play the GBA Pokémon games which I am far more familiar with, but settled on Pokémon Gold for the Gameboy Color.</p>\n<p>Playing Pokémon one frame every hour introduces a few more difficulties into the gameplay, the main one being that every single mistake you make could cost anywhere from a few hours to a few weeks to rectify.</p>\n<p>This is the journey so far.</p>\n<h2 id=\"february-10th-day-1\" tabindex=\"-1\">February 10th (Day 1) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p><a href=\"https://tomkahe.com/@pokemon\">@pokemon@tomkahe.com</a> is created and the bot generates its <a href=\"https://tomkahe.com/@pokemon/111908424046168338\">first post</a>.</p>\n<p>Over the course of a few hours, 2-3 people named our adventurer Fry.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/undefined\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/nfyGNI-AQO-160.avif 160w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/nfyGNI-AQO-160.webp 160w\" sizes=\"100vw\"><img alt=\"Screenshot of pokemon game: text reads Fry, are you ready?\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/nfyGNI-AQO-160.png\" width=\"160\" height=\"144\"></picture></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://tomkahe.com/@pokemon/111910484583212491\">Fry, are you ready?</a></td>\n</tr>\n</tbody>\n</table>\n<p>Early days involved <a href=\"https://tomkahe.com/@pokemon/111911428326064094\">polls with 0 votes</a>, especially polls that happened overnight.</p>\n<h2 id=\"february-11th-day-2\" tabindex=\"-1\">February 11th (Day 2) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p><a href=\"https://tomkahe.com/@pokemon/111914495434000447\">Turned the PC on</a> and then immediately turned it off again</p>\n<h2 id=\"february-12th-day-3\" tabindex=\"-1\">February 12th (Day 3) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p><a href=\"https://tomkahe.com/@pokemon/111917326546433527\">Made our way downstairs</a> to talk with our mother</p>\n<h2 id=\"february-15th-day-6\" tabindex=\"-1\">February 15th (Day 6) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p><a href=\"https://tomkahe.com/@pokemon/111934313499316348\">Our hero meets Professor Elm</a> in order to begin the adventure</p>\n<h2 id=\"february-16th-day-7\" tabindex=\"-1\">February 16th (Day 7) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Picked up our <a href=\"https://tomkahe.com/@pokemon/111941155456862566\">first pokemon</a> (Cyndaquil)</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/undefined\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/araB6DzlJU-160.avif 160w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/araB6DzlJU-160.webp 160w\" sizes=\"100vw\"><img alt=\"Screenshot from pokemon gold, cyndaquil's image in the center\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/araB6DzlJU-160.png\" width=\"160\" height=\"144\"></picture></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><em>Cyndaquil</em></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"february-17th-day-8\" tabindex=\"-1\">February 17th (Day 8) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Finished naming our new Cyndaquil, meet Ja?</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/undefined\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/moR1w5Q_dY-160.avif 160w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/moR1w5Q_dY-160.webp 160w\" sizes=\"100vw\"><img alt=\"Text window in pokemon game 'Ja?' is typed out\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/moR1w5Q_dY-160.png\" width=\"160\" height=\"144\"></picture></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://tomkahe.com/@pokemon/111945874054546278\">Meet Ja?</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"february-19th-fry-touches-grass-day-10\" tabindex=\"-1\">February 19th: Fry touches grass (Day 10) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Fry's very first <a href=\"https://tomkahe.com/@pokemon/111959793874141458\">pokemon battle</a></p>\n<h2 id=\"february-21st-day-12\" tabindex=\"-1\">February 21st (Day 12) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Ja? <a href=\"https://tomkahe.com/@pokemon/111968287107453033\">levels up</a> and learns Smokescreen</p>\n<h2 id=\"february-22nd-day-13\" tabindex=\"-1\">February 22nd (Day 13) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>It became clear that whenever we entered a battle it was unclear how time was progressing so a feature was introduced to animate all battles into an <a href=\"https://tomkahe.com/@tom/111976216194451578\">'action clip'</a></p>\n<h2 id=\"february-23rd-day-14\" tabindex=\"-1\">February 23rd (Day 14) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>The very first <a href=\"https://tomkahe.com/@pokemon/111983386566859116\">useful clip</a> is generated</p>\n<div class=\"video-container\">\n  <video controls=\"\">\n    <source src=\"https://tomcasavant.com/video/pokemon-action-clip.mp4\" type=\"video/mp4\">\n    Your browser does not support the video tag.\n  </video>\n</div>\n<h2 id=\"february-26th-day-17\" tabindex=\"-1\">February 26th (Day 17) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Fry arrives at <a href=\"https://tomkahe.com/@pokemon/111996831610628933\">Cherrygrove</a>, he proceeds to take a tour of that town for the next half day</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/undefined\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/EE4IkgCptd-160.avif 160w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/EE4IkgCptd-160.webp 160w\" sizes=\"100vw\"><img alt=\"Old man describing to Fry, 'this is the sea as you can see.'\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/EE4IkgCptd-160.png\" width=\"160\" height=\"144\"></picture></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://tomkahe.com/@pokemon/112000845998428315\">The Sea</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"february-28th-day-19\" tabindex=\"-1\">February 28th (Day 19) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>First <a href=\"https://tomkahe.com/@pokemon/112012874805373596\">Pokémon Center</a></p>\n<h2 id=\"march-6th-day-26\" tabindex=\"-1\">March 6th (Day 26) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Ja? <a href=\"https://tomkahe.com/@pokemon/112047320594297168\">Levels up!</a></p>\n<h2 id=\"march-7th-day-27\" tabindex=\"-1\">March 7th (Day 27) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Mysterious man gives us a mysterious egg, that we promptly forget about.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/undefined\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/4jsirQgIrb-160.avif 160w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/4jsirQgIrb-160.webp 160w\" sizes=\"100vw\"><img alt=\"Pokemon screenshot, text reads 'Fry received  MYSTERY EGG' \" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/4jsirQgIrb-160.png\" width=\"160\" height=\"144\"></picture></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://tomkahe.com/@pokemon/112052746886976002\">Mystery Egg</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"march-8th-day-28\" tabindex=\"-1\">March 8th (Day 28) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Professor Oak <a href=\"https://tomkahe.com/@pokemon/112061240469354964\">hires us to do his job for him</a> (no pay).</p>\n<h2 id=\"march-9th-day-29\" tabindex=\"-1\">March 9th (Day 29) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Our first <a href=\"https://tomkahe.com/@pokemon/112064781311639934\">phone call</a>! Professor Elm tells us to get back now- which we promptly ignore.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/undefined\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/L0dY9uu3K0-160.avif 160w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/L0dY9uu3K0-160.webp 160w\" sizes=\"100vw\"><img alt=\"Pokemon screenshot, text reads 'Please get back here now!'\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/L0dY9uu3K0-160.png\" width=\"160\" height=\"144\"></picture></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://tomkahe.com/@pokemon/112065487230876419\">See you never</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"march-12th-day-32\" tabindex=\"-1\">March 12th (Day 32) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Ja? <a href=\"https://tomkahe.com/@pokemon/112086248935212353\">levels up!</a></p>\n<h2 id=\"march-15th-day-35\" tabindex=\"-1\">March 15th (Day 35) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Strange man gives us a <a href=\"https://tomkahe.com/@pokemon/112102292115376693\">strange berry</a></p>\n<h2 id=\"march-19th-day-39\" tabindex=\"-1\">March 19th (Day 39) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>A wild rival appears</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/undefined\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/PDTxmH1fs5-160.avif 160w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/PDTxmH1fs5-160.webp 160w\" sizes=\"100vw\"><img alt=\"Pokemon screenshot, text reads 'What a waste. A wimp like you.'\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/PDTxmH1fs5-160.png\" width=\"160\" height=\"144\"></picture></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://tomkahe.com/@pokemon/112124469507883764\">No you</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"march-26th-day-46\" tabindex=\"-1\">March 26th (Day 46) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>17 days after Professor Elm called us in a panic we arrive back at the lab, which was fortunate because that's how long it took <a href=\"https://tomkahe.com/@pokemon/112160566756891622\">the police to start investigating</a> the stolen pokemon.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/undefined\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/10iFLv8-up-160.avif 160w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/10iFLv8-up-160.webp 160w\" sizes=\"100vw\"><img alt=\"Pokemon screenshot, text reads 'OK! So BUTT was his name.'\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/10iFLv8-up-160.png\" width=\"160\" height=\"144\"></picture></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://tomkahe.com/@pokemon/112165285321900386\">Fry, meet BUTT</a></td>\n</tr>\n</tbody>\n</table>\n<p>In classic internet fashion, we <a href=\"https://tomkahe.com/@pokemon/112165285321900386\">name our rival Butt</a>.</p>\n<p>Note: We forget to talk to Professor Elm to give him his weird egg.</p>\n<h2 id=\"march-29th-day-49\" tabindex=\"-1\">March 29th (Day 49) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Ja? <a href=\"https://tomkahe.com/@pokemon/112179677033326177\">levels up!</a></p>\n<h2 id=\"april-6th-day-57\" tabindex=\"-1\">April 6th (Day 57) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Small change to the bot, the gif is now generated <a href=\"https://tomkahe.com/@pokemon/112226156011165858\">every single hour</a> instead of just during battles.</p>\n<h2 id=\"april-10th-day-61\" tabindex=\"-1\">April 10th (Day 61) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Pokémon <a href=\"https://tomkahe.com/@pokemon/112247861590138270\">blocks our path</a> and a <a href=\"https://tomkahe.com/@pokemon/112259931160532490\">new communication is established</a> because we forgot to deliver an egg to the Professor and have just wasted nearly a month walking back and forth.</p>\n<p>Since polls happen every hour, people would regularly try to talk with each other in the comments and the only one who was keenly aware of who wanted to do what was me because I got tagged in everything.</p>\n<p>Using the a.gup.pe group meant anyone could just click into the group and see a timeline of the conversation so far.</p>\n<h2 id=\"april-22nd-day-73\" tabindex=\"-1\">April 22nd (Day 73) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Nearly 30 days after Professor Elm told us to get back ASAP we talk to the professor and give him this egg we've been carrying around in our backpack for weeks.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/undefined\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/KRUPqqj-6Y-160.avif 160w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/KRUPqqj-6Y-160.webp 160w\" sizes=\"100vw\"><img alt=\"Pokemon screenshot, text reads 'ELM: FRY, this is terrible...'\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/KRUPqqj-6Y-160.png\" width=\"160\" height=\"144\"></picture></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://tomkahe.com/@pokemon/112314865493774646\">You don't know the half of it</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"april-28th-day-79\" tabindex=\"-1\">April 28th (Day 79) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Caught our <a href=\"https://tomkahe.com/@pokemon/112348839380190672\">first pokemon!</a></p>\n<p>Controversy strikes as the splintered community try to name this Sentret (Also this starts a series of our most voted on polls, when we named Ja? there were about 10 votes, when we named BUTT there were 30-40 voters, these polls were minimum 50 but maxed out at about 110 votes)</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/undefined\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/ishm64LuFi-160.avif 160w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/ishm64LuFi-160.webp 160w\" sizes=\"100vw\"><img alt=\"Pokemon screenshot, name editor window reads 'PEID'\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/ishm64LuFi-160.png\" width=\"160\" height=\"144\"></picture></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://tomkahe.com/@pokemon/112356624852310042\">Surely nothing can go wrong here</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"april-29th-day-80\" tabindex=\"-1\">April 29th (Day 80) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>The Sentret is <a href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/tomkahe.com/@pokemon/112357804718707917\">named PEIDO</a> which is <a href=\"https://www.collinsdictionary.com/us/dictionary/portuguese-english/peido\">slang</a></p>\n<h2 id=\"may-1st-day-82\" tabindex=\"-1\">May 1st (Day 82) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Ja? <a href=\"https://tomkahe.com/@pokemon/112366770018654932\">levels up!</a></p>\n<h2 id=\"may-5th-day-86\" tabindex=\"-1\">May 5th (Day 86) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Gameboy Color game now played on <a href=\"https://tomkahe.com/@pokemon/112389891160651747\">official hardware</a></p>\n<h2 id=\"may-7th-day-88\" tabindex=\"-1\">May 7th (Day 88) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Gameboy Color game now played on the better looking transparent official hardware.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/undefined\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/yZRFYtZ3PI-448.avif 448w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/yZRFYtZ3PI-448.webp 448w\" sizes=\"100vw\"><img alt=\"Pokemon screenshot inside transparent purple gameboy color\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/yZRFYtZ3PI-448.png\" width=\"448\" height=\"741\"></picture></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://tomkahe.com/@pokemon/112402869917887919\">Now I never have to change this image again, he said, lying.</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"may-9th-day-90\" tabindex=\"-1\">May 9th (Day 90) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>We finally <a href=\"https://tomkahe.com/@pokemon/112414665032979095\">break through</a> to the other side</p>\n<h2 id=\"may-11th-day-92\" tabindex=\"-1\">May 11th (Day 92) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Ja? <a href=\"https://tomkahe.com/@pokemon/112425517604590755\">levels up!</a></p>\n<h2 id=\"may-15th-day-96\" tabindex=\"-1\">May 15th (Day 96) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Phone call <a href=\"https://tomkahe.com/@pokemon/112446279463353545\">from Mom</a></p>\n<h2 id=\"may-20th-day-101\" tabindex=\"-1\">May 20th (Day 101) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Ja? <a href=\"https://tomkahe.com/@pokemon/112472703517081930\">levels up!</a></p>\n<h2 id=\"may-22nd-day-103\" tabindex=\"-1\">May 22nd (Day 103) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Fry finally makes it to <a href=\"https://tomkahe.com/@pokemon/112486859056848759\">Violet</a></p>\n<h2 id=\"may-26th-day-107\" tabindex=\"-1\">May 26th (Day 107) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>By popular demand, <a href=\"https://tomkahe.com/@pokemon/112507975031035361\">polling rate is doubled</a> to 2 polls every hour.</p>\n<h2 id=\"may-28th-day-109\" tabindex=\"-1\">May 28th (Day 109) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Ja? <a href=\"https://tomkahe.com/@pokemon/112521658890227130\">levels up!</a></p>\n<h2 id=\"june-1st-day-113\" tabindex=\"-1\">June 1st (Day 113) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Ja? levels up! and evolves into QUILAVA.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/undefined\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/PQiQEMnYLH-160.avif 160w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/PQiQEMnYLH-160.webp 160w\" sizes=\"100vw\"><img alt=\"Pokemon screenshot, text reads 'evolved into QUILAVA!'\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/PQiQEMnYLH-160.png\" width=\"160\" height=\"144\"></picture></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://tomkahe.com/@pokemon/112536876354565745\">Ja? Is all grown up now</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"june-3rd-day-115\" tabindex=\"-1\">June 3rd (Day 115) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Ja? <a href=\"https://tomkahe.com/@pokemon/112551975598348271\">levels up!</a></p>\n<h2 id=\"june-4th-day-116\" tabindex=\"-1\">June 4th (Day 116) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>We obtain our very first HM, <a href=\"https://tomkahe.com/@pokemon/112558345974118861\">HM05 (Flash)</a></p>\n<h2 id=\"june-7th-day-119\" tabindex=\"-1\">June 7th (Day 119) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>Ja? <a href=\"https://tomkahe.com/@pokemon/112577456365796161\">levels up!</a></p>\n<h2 id=\"june-8th-day-120\" tabindex=\"-1\">June 8th (Day 120) <a class=\"header-anchor\" href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/\">#</a></h2>\n<p>3 months since Fry set off on his adventure he has finally obtained his first gym badge.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/2-904-hours-later-a-pokemon-saga/undefined\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/wWGqd7X_T3-160.avif 160w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/wWGqd7X_T3-160.webp 160w\" sizes=\"100vw\"><img alt=\"Pokemon screenshot, text reads 'FRY received ZEPHYRBADGE'\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/wWGqd7X_T3-160.png\" width=\"160\" height=\"144\"></picture></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://tomkahe.com/@pokemon/112583944417277818\">1 of many</a></td>\n</tr>\n</tbody>\n</table>\n<div class=\"video-container\">\n  <video controls=\"\">\n    <source src=\"https://tomcasavant.com/video/pokemon-full-vid.mp4\" type=\"video/mp4\">\n    Your browser does not support the video tag.\n  </video>\n</div>\n",
			"date_published": "2024-06-10T00:00:00Z"
		}
		,
		{
			"id": "https://tomcasavant.com/things-i-did-not-blog-about/",
			"url": "https://tomcasavant.com/things-i-did-not-blog-about/",
			"title": "Things I Did Not Blog About",
			"content_html": "<p>Here's a bunch of things I did that, for any number of reasons, I didn't bother writing about.</p>\n<h2 id=\"my-brother-s-keeper\" tabindex=\"-1\">My Brother's Keeper <a class=\"header-anchor\" href=\"https://tomcasavant.com/things-i-did-not-blog-about/\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/img/v6JBdHnNos-1001.jpeg\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/v6JBdHnNos-600.avif 600w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/v6JBdHnNos-600.webp 600w\" sizes=\"100vw\"><img alt=\"The 3D model of roger in a snapchat window\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/v6JBdHnNos-600.jpeg\" width=\"600\" height=\"1064\"></picture></a></th>\n</tr>\n</thead>\n</table>\n<p>I used a photo of my twin to generate a 3D model of him and then I attempted to insert that 3D Model into two different games, made a video of a giant waffle version of him in space with the theme to 2001 A Space Odyssey playing in the background, rotated his spine out of his body to create a weird monster version of him, and created a <a href=\"https://www.snapchat.com/unlock/?type=SNAPCODE&amp;uuid=b68cf3b8819242c6896440f35ecbfe09&amp;metadata=01\">snapchat lens</a> that lets you rotate, resize, and place the 3D model of my twin anywhere you want.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/img/WiHOknec68-2052.jpeg\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/WiHOknec68-600.avif 600w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/WiHOknec68-600.webp 600w\" sizes=\"100vw\"><img alt=\"The 3D model of Roger in a pokemon game\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/WiHOknec68-600.jpeg\" width=\"600\" height=\"1066\"></picture></a></th>\n</tr>\n</thead>\n</table>\n<div class=\"video-container\">\n  <video controls=\"\">\n    <source src=\"https://tomcasavant.com/video/roger-gameboy.mp4\" type=\"video/mp4\">\n    Your browser does not support the video tag.\n  </video>\n</div>\n<div class=\"video-container\">\n  <video controls=\"\">\n    <source src=\"https://tomcasavant.com/video/mario-kart-roger.mp4\" type=\"video/mp4\">\n    Your browser does not support the video tag.\n  </video>\n</div>\n<h2 id=\"mechanical-keyboards\" tabindex=\"-1\">Mechanical Keyboards <a class=\"header-anchor\" href=\"https://tomcasavant.com/things-i-did-not-blog-about/\">#</a></h2>\n<p>Assembled a hot swappable keyboard with <a href=\"https://drop.com/featured/lotr\">Lord of the Rings keycaps</a></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/img/S55qBdsiiL-4000.jpeg\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/S55qBdsiiL-600.avif 600w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/S55qBdsiiL-600.webp 600w\" sizes=\"100vw\"><img alt=\"Photo of the keyboard with lord of the rings keycaps\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/S55qBdsiiL-600.jpeg\" width=\"600\" height=\"450\"></picture></a></th>\n</tr>\n</thead>\n</table>\n<p>Soldered and Assembled the <a href=\"https://scottokeebs.com/blogs/keyboards/scotto34-pcb-keyboard\">Scotto34</a></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/img/9UBMtrUpDV-4000.jpeg\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/9UBMtrUpDV-600.avif 600w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/9UBMtrUpDV-600.webp 600w\" sizes=\"100vw\"><img alt=\"Photo of the scotto34 keyboard\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/9UBMtrUpDV-600.jpeg\" width=\"600\" height=\"450\"></picture></a></th>\n</tr>\n</thead>\n</table>\n<h2 id=\"3d-prints-hardware\" tabindex=\"-1\">3D Prints/Hardware <a class=\"header-anchor\" href=\"https://tomcasavant.com/things-i-did-not-blog-about/\">#</a></h2>\n<p>I assembled the <a href=\"https://inputlabs.io/alpakka\">Input Labs Alpakka</a>, an open source gyro focused gamepad, which was surprisingly comfortable to hold considering it was entirely made of 3d printed parts.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/img/8WiAaDaLaT-3000.jpeg\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/8WiAaDaLaT-600.avif 600w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/8WiAaDaLaT-600.webp 600w\" sizes=\"100vw\"><img alt=\"Photo of the Input Labs Alpakka Controller, black body yellow buttons\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/8WiAaDaLaT-600.jpeg\" width=\"600\" height=\"800\"></picture></a></th>\n</tr>\n</thead>\n</table>\n<p>I 3D Printed and assembled the <a href=\"https://github.com/martinwoodward/octolamp\">OctoLamp</a></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/img/yvSZrZgPBg-999.jpeg\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/yvSZrZgPBg-600.avif 600w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/yvSZrZgPBg-600.webp 600w\" sizes=\"100vw\"><img alt=\"Photo of Github Logo Lamp lit up in shades of pink\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/yvSZrZgPBg-600.jpeg\" width=\"600\" height=\"1066\"></picture></a></th>\n</tr>\n</thead>\n</table>\n<p>I 3D Printed and Assembled the <a href=\"https://www.printables.com/model/436448-lord-of-the-rings-lamp\">Lord of the Rings Lamp</a>, and slightly modified the light ring to let me use the LED Strip I already had along with WLED.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/things-i-did-not-blog-about/undefined\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/Oh2tAO_njJ-542.avif 542w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/Oh2tAO_njJ-542.webp 542w\" sizes=\"100vw\"><img alt=\"Photo of the ring from Lord of the Rings as a lamp, lit up with Red LEDs\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/Oh2tAO_njJ-542.png\" width=\"542\" height=\"820\"></picture></a></th>\n</tr>\n</thead>\n</table>\n<p>I 3D Printed a shell for a picamera and raspberry pi to build the <a href=\"https://github.com/nickbrewer/gifcam\">Gif Camera</a> with the intention of using the <a href=\"https://github.com/chemokita13/beReal-api\">BeReal (unofficial) API</a> to upload images to BeReal directly from the camera, but there were issues with the post endpoint so that aspect was never completed. But I adjusted it to use Mastodon and other minor changes so it worked with the newer PiCamera in <a href=\"https://github.com/tomcasavant/gifcam\">my fork</a></p>\n<p>I 3D Printed <a href=\"https://www.youtube.com/watch?v=ohfqQ_8oEoY\">Wormhole Chess</a> mainly to experiment with putting magnets into 3D Prints</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/img/30dPUefGT8-999.jpeg\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/30dPUefGT8-600.avif 600w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/30dPUefGT8-600.webp 600w\" sizes=\"100vw\"><img alt=\"Photo of the 3d printed chessboard with a hole in the middle that leads to another chessboard\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/30dPUefGT8-600.jpeg\" width=\"600\" height=\"1066\"></picture></a></th>\n</tr>\n</thead>\n</table>\n<p>I built a <a href=\"https://pwnagotchi.ai/\">pwnagotchi</a> and 3d printed a case for it</p>\n<p>I built a battery powered homeasistant dashboard with an E-Ink screen and a 3D printed shell</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/img/i0mQASLeOl-3000.jpeg\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/i0mQASLeOl-600.avif 600w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/i0mQASLeOl-600.webp 600w\" sizes=\"100vw\"><img alt=\"Photo of the purple 3d printed dashboard showing the date along with temperature/humidity from inside and outside\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/i0mQASLeOl-600.jpeg\" width=\"600\" height=\"800\"></picture></a></th>\n</tr>\n</thead>\n</table>\n<p>I 3D printed <a href=\"https://www.printables.com/model/23859-designer-moon-lamp/files\">The Moon Lamp</a>. It did not go well, there is a lot of hot glue, and I don't think I can ever remove the bulb without breaking it.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/img/pHjpst68O5-3000.jpeg\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/pHjpst68O5-600.avif 600w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/pHjpst68O5-600.webp 600w\" sizes=\"100vw\"><img alt=\"Photo of the moon lamp with a bulb colored blue inside\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/pHjpst68O5-600.jpeg\" width=\"600\" height=\"800\"></picture></a></th>\n</tr>\n</thead>\n</table>\n<h2 id=\"software\" tabindex=\"-1\">Software <a class=\"header-anchor\" href=\"https://tomcasavant.com/things-i-did-not-blog-about/\">#</a></h2>\n<p>I used github actions to slowly simulate a chess game while displaying the current chess piece formation using LaTeX which you can see in this <a href=\"https://github.com/TomCasavant/latex-chess\">Github Repo</a> - Basically there was a github action on a cron schedule to run a python script that would load in the current moves in a chess game, pick the next action, generate a .tex file with the new chessboard, convert that to a PDF and then convert the PDF to a screenshot of the board which would display in the README.</p>\n<p>I created a <a href=\"https://decky.xyz/\">Decky Loader</a> plugin for the Steam Deck that lets you upload a screenshot straight from the Gamepad UI to any mastodon-compatible API, it can also auto-upload screenshots immediately after taking them. It's still somewhat glitchy and I was running into issues with Pixelfed's API (which I believe have been fixed recently) which required users to create a APP manually from their pixelfed settings. Repo: <a href=\"https://github.com/TomCasavant/DeckMastodonPoster\">TomCasavant/DeckMastodonPoster</a></p>\n<p>While experimenting with the mastodon API, I created a very simple Wikipedia-Mastodon Bot which posts a 'Today in History' post every day at 6PM EST to <a href=\"https://tomkahe.com/@daily_wikipedia\">@daily_wikipedia@tomkahe.com</a>. Repo: <a href=\"https://github.com/TomCasavant/wikibot\">TomCasavant/wikibot</a></p>\n<p>Experimenting with a library called <a href=\"https://github.com/Breakthrough/PySceneDetect\">PySceneDetect</a> I built a bot that would attempt to extract clips from a tv show and post them to mastodon (it's hit or miss) <a href=\"https://tomkahe.com/@community\">@community@tomkahe.com</a>. <a href=\"https://github.com/TomCasavant/mastodon-plex-scenes\">TomCasavant/mastodon-plex-scenes</a></p>\n<p>A few years ago I was connecting random things together in Homeassistant and ended up with an automation that takes the current song I'm listening to and posts it to this mastodon account: <a href=\"https://mastodon.social/@TomsMusic\">@tomsmusic@mastodon.social</a></p>\n<p>After getting somewhat annoyed that following a lemmy/kbin community from mastodon meant I had to see every single comment on every single post boosted into my timeline, a built a sort-of fix for it with a proxy account that follows the lemmy communities and only boosts the top-level posts. <a href=\"https://github.com/TomCasavant/mastodon-groupy\">TomCasavant/mastodon-groupy</a> and example bot is located <a href=\"https://tomkahe.com/@groupy\">@groups@tomkahe.com</a></p>\n<p>I forked <a href=\"https://github.com/ckolderup/postmarks\">Postmarks</a> - a federated bookmarking platform that can be hosted on <a href=\"https://tomcasavant.com/things-i-did-not-blog-about/glitch.com\">glitch.com</a> so I could make some opinionated changes to how it worked for me such as keeping the hashtags hidden from the post, adding in profile fields, embedding spotify/youtube iframes, and automatically archiving links on the Internet Archive. Repo: <a href=\"https://github.com/TomCasavant/tom-postmarks\">TomCasavant/tom-postmarks</a></p>\n<p>I modified a chrome extension to place images of my twin in all your youtube thumbnails - this only sort of counts because all I did was swap out some photos and learn how to build Firefox/Chrome packages. <a href=\"https://github.com/TomCasavant/Rogerify-Youtube\">TomCasavant/Rogerify-Youtube</a></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/things-i-did-not-blog-about/undefined\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/4Z4JdDdoYG-600.avif 600w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/4Z4JdDdoYG-600.webp 600w\" sizes=\"100vw\"><img alt=\"Screenshot of a youtube thumbnail entitled 'classical music but its lofi' with my brother inserted into the thumbnail\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/4Z4JdDdoYG-600.png\" width=\"600\" height=\"375\"></picture></a></th>\n</tr>\n</thead>\n</table>\n<p>I used an unofficial Animal Crossing API to have my character automatically say (in a chat bubble) what song I'm listening to</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/things-i-did-not-blog-about/undefined\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/RQojm5BJsa-456.avif 456w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/RQojm5BJsa-456.webp 456w\" sizes=\"100vw\"><img alt=\"Photo of a switch showing my Animal Crossing character saying 'Invisible String' which was the Taylor Swift song I was listening to\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/RQojm5BJsa-456.png\" width=\"456\" height=\"396\"></picture></a></th>\n</tr>\n</thead>\n</table>\n<h2 id=\"running\" tabindex=\"-1\">Running <a class=\"header-anchor\" href=\"https://tomcasavant.com/things-i-did-not-blog-about/\">#</a></h2>\n<p>I ran a 5k while carrying a 5lb pumpkin</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/img/lUD0U4uqcR-2500.jpeg\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/lUD0U4uqcR-600.avif 600w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/lUD0U4uqcR-600.webp 600w\" sizes=\"100vw\"><img alt=\"Photo of me running while carrying a 5lb pumpkin over my shoulder\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/lUD0U4uqcR-600.jpeg\" width=\"600\" height=\"401\"></picture></a></th>\n</tr>\n</thead>\n</table>\n<p>In September of 2022 I read an article about a person who decided to walk 20,000 steps a day for a week and they said it was something they'd never do again because of how difficult it was. So in October of 2022 I walked/ran 30,000 steps (it felt unfair to only do 20,000 since I was already doing 15,000 a day) every day for a month and it was an exhausting experience that I will never do again. I ended the month with 1,000,090.</p>\n<p>I was feeling pretty great at the end of the month so I decided to run 2 miles every hour over the course of 24 hours (I ended up attaching a 25th hour so I could even it out at 50 miles). That was October 29th-30th, 2022. October 29th remains my record for steps in a day at 73,066.</p>\n<p>I am not a fan of seeing numbers go down so for the entirety of 2023 I walked/ran at least 20,000 steps every single day, ending the year with 7,473,873 total steps (a total distance of 3492.9 miles). It started off well but by July I started getting extemely exhausted every day and runs were replaced with walks resulting in significantly less distance ran than I normally do in a year.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/img/xCEK0Rsdgd-1080.jpeg\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/xCEK0Rsdgd-600.avif 600w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/xCEK0Rsdgd-600.webp 600w\" sizes=\"100vw\"><img alt=\"Screenshot from Garmin showing an average of 20,476 steps every day throughout 2023\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/xCEK0Rsdgd-600.jpeg\" width=\"600\" height=\"955\"></picture></a></th>\n</tr>\n</thead>\n</table>\n",
			"date_published": "2024-05-29T00:00:00Z"
		}
		,
		{
			"id": "https://tomcasavant.com/tomline/",
			"url": "https://tomcasavant.com/tomline/",
			"title": "Tomline",
			"content_html": "<p>Everyone on mastodon is always 'federated timeline' this and 'local timeline' that but nobody ever asks, where's OUR timeline? Well everything is about to change as we are <em>proud</em> to announce</p>\n<h1 id=\"the-tomline\" tabindex=\"-1\">The Tomline. <a class=\"header-anchor\" href=\"https://tomcasavant.com/tomline/\">#</a></h1>\n<p>(The Tomline is live @ https://tomkahe.com/public)</p>\n<p>The Tomline is an innovative design focused on providing the best experience in the fediverse. We combine AI technologies of the future with the blockchain technologies of the past to create the perfect blend of form and function. A timeline consisting entirely of people named Tom, Thomas, Tomas, and all other variants.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/tomline/undefined\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/Zx8pSuzG7o-484.avif 484w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/Zx8pSuzG7o-484.webp 484w\" sizes=\"100vw\"><img alt=\"Screenshot of the Tomline in action\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/Zx8pSuzG7o-484.png\" width=\"484\" height=\"404\"></picture></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><em>This is how the fediverse was meant to be viewed</em></td>\n</tr>\n</tbody>\n</table>\n<p>But don't just take it from us, take it from our loyal Tomline subscribers</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/img/kunt_XYJur-6200.jpeg\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/kunt_XYJur-600.avif 600w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/kunt_XYJur-600.webp 600w\" sizes=\"100vw\"><img alt=\"Blake's review of the Tomline\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/kunt_XYJur-600.jpeg\" width=\"600\" height=\"348\"></picture></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/img/qdDGoNCzV--6000.jpeg\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/qdDGoNCzV--600.avif 600w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/qdDGoNCzV--600.webp 600w\" sizes=\"100vw\"><img alt=\"Kurt's review of the Tomline\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/qdDGoNCzV--600.jpeg\" width=\"600\" height=\"306\"></picture></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/img/hpqDR0xo_g-5487.jpeg\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/hpqDR0xo_g-600.avif 600w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/hpqDR0xo_g-600.webp 600w\" sizes=\"100vw\"><img alt=\"Ashley's review of the Tomline\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/hpqDR0xo_g-600.jpeg\" width=\"600\" height=\"355\"></picture></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n",
			"date_published": "2024-04-01T00:00:00Z"
		}
		,
		{
			"id": "https://tomcasavant.com/experimenting-with-activitypub-minetest-activitypub-bridge/",
			"url": "https://tomcasavant.com/experimenting-with-activitypub-minetest-activitypub-bridge/",
			"title": "Experimenting with ActivityPub: Minetest ActivityPub Bridge",
			"content_html": "<p>I've found the easiest way to learn how software works is to try and do something stupid with it.</p>\n<p>ActivityPub is a decentralized social networking protocol and is the thing that lets Mastodon servers communicate with Pixelfed servers communicate with Threads communicate with Flipboard and on and on.\nI've done <a href=\"https://tomcasavant.com/the-problem-with-hashtags\">a bit</a> of <a href=\"https://github.com/TomCasavant/tom-postmarks\">development</a> on servers that <em>use</em> ActivityPub but I have never dealt with the protocol itself.</p>\n<p><em>until now.</em></p>\n<p><a href=\"https://www.minetest.net/\">Minetest</a> is an &quot;open source voxel game engine&quot; and is designed to make modding very simple. Copy a few files into the <code>mods/</code> directory and suddenly you're executing lua code from within the game.\nIt also has an in-game chat window for communicating with other players on a given server.</p>\n<p>But what if it could do more than that? What if you could send and receive messages from anyone and anywhere?</p>\n<p>&quot;But Tom,&quot; you ask, &quot;won't that just clog up the chat with pointless messages from strangers?&quot;\nAnd yes, you would be correct. But (TODO: COME UP WITH REASON WHY THIS IS USEFUL).</p>\n<h2 id=\"the-plan\" tabindex=\"-1\">The Plan <a class=\"header-anchor\" href=\"https://tomcasavant.com/experimenting-with-activitypub-minetest-activitypub-bridge/\">#</a></h2>\n<p>For reasons other than this project I have already been looking for an ActivityPub server that will let me generate users at-will. Most servers are designed for users so they require you to add emails and passwords and useless junk that I do not care about.\nHaving failed to find anything that would suit my needs I created <a href=\"https://github.com/TomCasavant/DynamicActivityPub/\">this project</a> which would allow me to split this project into 2 parts.</p>\n<ol>\n<li>The Server - A basic ActivityPub server with endpoints for creating Users, Groups, and generating ActivityPub compatible messages</li>\n<li>The Mod - A Lua minetest mod that communicates with the server, when a user sends a message upload it to the server. When the server receives a message it should send that to the chat through this mod.</li>\n</ol>\n<p>I had considered implementing the server in Lua so it could be built into the mod itself, but as far as I could find Minetest won't let me create web enpoints from the mod (the <a href=\"https://content.minetest.net/packages/heger/webchat/\">few mods</a> where that would be useful just have a separate server that the user has to setup the files for)</p>\n<h2 id=\"activitypub-implementation\" tabindex=\"-1\">ActivityPub Implementation <a class=\"header-anchor\" href=\"https://tomcasavant.com/experimenting-with-activitypub-minetest-activitypub-bridge/\">#</a></h2>\n<p>This was by far the harder of the 2 portions of the project, primarily because there is <em>not</em> a lot of documentation for this protocol.</p>\n<p>Well, that's not entirely true. <a href=\"https://www.w3.org/TR/activitypub/\">w3</a> has some very detailed descriptions which were incredibly useful, but the protocol is defined slightly differently from server-to-server. So something that mastodon is able to understand and accept doesn't necessarily show up on an <a href=\"https://github.com/MbinOrg/mbin\">Mbin</a> server unless certain requirements are met.</p>\n<p>Getting a basic account to be discoverable was actually VERY easy. The base protocol calls for an endpoint for each user that returns json with a few attributes, Mastodon (and most others from what I've seen) require slightly more information including a <code>publicKey</code> and <code>preferredUsername</code>.\nA JSON request to that endpoint ends up returning something like this:</p>\n<pre class=\"language-json\" tabindex=\"0\"><code class=\"language-json\">https<span class=\"token operator\">:</span><span class=\"token comment\">//activitypubtesting.duckdns.org/users/testUser1</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@context\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"https://www.w3.org/ns/activitystreams\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"https://w3id.org/security/v1\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> f<span class=\"token string\">\"https://activitypubtesting.duckdns.org/users/testUser1\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"inbox\"</span><span class=\"token operator\">:</span> f<span class=\"token string\">\"https://activitypubtesting.duckdns.org/users/testUser1/inbox\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"outbox\"</span><span class=\"token operator\">:</span> f<span class=\"token string\">\"https://activitiypubtesting.duckdns.org/users/testUser1/outbox\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Person\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> f<span class=\"token string\">\"Test User 1\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"preferredUsername\"</span><span class=\"token operator\">:</span> f<span class=\"token string\">\"testUser1\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"publicKey\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> f<span class=\"token string\">\"https://activitypubtesting.duckdns.org/users/testUser1#main-key\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"owner\"</span><span class=\"token operator\">:</span> f<span class=\"token string\">\"https://activitypubtesting.duckdns.org/users/testUser1\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"publicKeyPem\"</span><span class=\"token operator\">:</span> THE PUBLIC KEY GENERATED FOR THIS USER\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<p>There are other optional components to this which would show up differently for different servers. If you added <code>attachments</code>, for example, Mastodon would display these as profile fields.\nEssentially whenever an ActivityPub server needs to obtain information about a user it uses the JSON data from this endpoint to discover where to send data to and where to pull data from.</p>\n<p>We can also (optionally) define a webfinger endpoint. This just lets other servers find the /users/ endpoint where a user profile is located and is always at /.well-known/webfinger.\nYou can experiment with webfingers here: https://webfinger.net/ and just search for <code>@your_username@yourserver.com</code></p>\n<p>Next (because it seemed far easier than posting messages) was following a user and receiving messages. All you need to receiver a message from another server is the <code>inbox</code> endpoint. There's no special activitypub stuff we have to do here, this just receives data from a server (my assumption is that most servers do some verification steps here whenever data is received, but I have not done that).\nBut, no messages will be sent to you <em>unless</em> you instruct other servers to talk to you.</p>\n<p>This is where I ran into my first hurdle- cryptographic signatures. The purpose for these is to help servers have confidence that the server that's sending you data is who they say they are.\nThere are far more experienced people out there who can explain in detail how these work, but in simple terms this is the process:</p>\n<ul>\n<li>Server A generates a private key, which looks like this, then saves this and never tells anyone what this is ever:</li>\n</ul>\n<pre><code>-----BEGIN RSA PRIVATE KEY-----\nMIIBOgIBAAJBAKj34GkxFhD90vcNLYLInFEX6Ppy1tPf9Cnzj4p4WGeKLs1Pt8Qu\nKUpRKfFLfRYC9AIKjbJTWit+CqvjWYzvQwECAwEAAQJAIJLixBy2qpFoS4DSmoEm\no3qGy0t6z09AIJtH+5OeRV1be+N4cDYJKffGzDa88vQENZiRm0GRq6a+HPGQMd2k\nTQIhAKMSvzIBnni7ot/OSie2TmJLY4SwTQAevXysE2RbFDYdAiEBCUEaRQnMnbp7\n9mxDXDf6AU0cN/RPBjb9qSHDcWZHGzUCIG2Es59z8ugGrDY+pxLQnwfotadxd+Uy\nv/Ow5T0q5gIJAiEAyS4RaI9YG8EWx/2w0T67ZUVAw8eOMB6BIUg0Xcu+3okCIBOs\n/5OiPgoTdSy7bcF9IGpSE8ZgGKzgYQVZeN97YE00\n-----END RSA PRIVATE KEY-----\n</code></pre>\n<ul>\n<li>Server A then uses that private key to generate a public key (this public key is what we store on the /users/ endpoint). Which looks like this:</li>\n</ul>\n<pre><code>-----BEGIN RSA PUBLIC KEY-----\nMEgCQQCo9+BpMRYQ/dL3DS2CyJxRF+j6ctbT3/Qp84+KeFhnii7NT7fELilKUSnx\nS30WAvQCCo2yU1orfgqr41mM70MBAgMBAAE=\n-----END RSA PUBLIC KEY----\n</code></pre>\n<p>*Note: I didn't do any deep work with these, there's a <a href=\"https://cryptography.io/en/latest/\">python cryptography</a> library that handles generating these</p>\n<ul>\n<li>Server A creates a message that says '@testUser1@ServerA.com wants to follow @testUser2@ServerB.com'</li>\n<li>Before sending that message Server A retrieves our private key from before and uses it to encrypt the message.</li>\n<li>Server B receives the encrypted message and uses the publicKey from the /users/ endpoint to decrypt it</li>\n<li>if Server B determines that private key that signed this message is the same private key that signed the public key then it accepts it as a genuine request and will now start sending @testUser2's posts to @testUser1's inbox</li>\n</ul>\n<p>There was <em>A LOT</em> of trial and error trying to get this to work properly after building this function to test my public key I learned most of my issues were because I was incorrectly returning the publicKey in the /users/ endpoint so anything sent couldn't be verified</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">verification_testing</span><span class=\"token punctuation\">(</span>public_key_url<span class=\"token punctuation\">,</span> private_key<span class=\"token punctuation\">,</span> raw_signature<span class=\"token punctuation\">,</span> signature_text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Load the public key JSON from the user's URL</span>\n    public_key_response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>public_key_url<span class=\"token punctuation\">)</span>\n    public_key_json <span class=\"token operator\">=</span> public_key_response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'publicKey'</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># Extract the public key from the JSON</span>\n    public_key_pem <span class=\"token operator\">=</span> public_key_json<span class=\"token punctuation\">[</span><span class=\"token string\">'publicKeyPem'</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># Load the public key</span>\n    public_key <span class=\"token operator\">=</span> serialization<span class=\"token punctuation\">.</span>load_pem_public_key<span class=\"token punctuation\">(</span>\n        public_key_pem<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        backend<span class=\"token operator\">=</span>crypto_default_backend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        public_key<span class=\"token punctuation\">.</span>verify<span class=\"token punctuation\">(</span>\n            raw_signature<span class=\"token punctuation\">,</span>\n            signature_text<span class=\"token punctuation\">,</span>\n            padding<span class=\"token punctuation\">.</span>PKCS1v15<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            hashes<span class=\"token punctuation\">.</span>SHA256<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Signature verification successful\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Signature verification failed: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre>\n<p>After this I was now able to follow users and messages were flowing in. Fortunately for us, the process of signing messages is identical whenever a message has to be signed.\nSetting up followers was pretty easy (or so I thought). Essentially in the user/inbox/ endpoint we check the data received for 'Follow', and then process the information there (<em>again</em> you should probably be doing the cryptographic verification of their signatures but I did not).\nI learned during this that Mastodon requires that you send a signed 'Accept' message or else they won't treat the follow as successful.</p>\n<p>Posting messages is pretty straight-forward, you just have to loop through all the users that follow you and send the signed message to their inboxes. My create message endpoint generates the user if it doesn't already exist in the server (since we will need to generate users for each Minetest user that exists)</p>\n<p>The last ActivityPub type I messed around with was Group. Unlike the user (or Person) entity, there is not a very unified description of how a group functions.\nThrough some experimentation in <a href=\"https://activitypub.academy/\">https://activitypub.academy</a> I learned that Lemmy's groups just send Announce activities to mastodon (which mastodon displays as boosts), but I believe they're a little more complex when a lemmy community talks with another server that actually supports groups.</p>\n<p>I didn't delve that much into it, I just need to create a Group entity that boosts all of the messages from each individual user that way you can see a feed of all the server messages.</p>\n<h2 id=\"minetest\" tabindex=\"-1\">Minetest <a class=\"header-anchor\" href=\"https://tomcasavant.com/experimenting-with-activitypub-minetest-activitypub-bridge/\">#</a></h2>\n<p>Don't worry, this a much shorter topic. A minetest mod consists of 2 files (mine consists of 3), the init.lua and hte mod.conf.\nmod.conf just defines what a plugin is and allows you to set configuration variables.\ninit.lua contains the lua script that interacts with the minetest server.</p>\n<p>I also added in a json.lua file which I copied in that makes the JSON requests we have to make easier.</p>\n<p>There's basically just 2 things we need to do in this file</p>\n<ul>\n<li>Send all new messages to the activitypub server</li>\n<li>And retrieve new messages (ideally, the server would just send message whenever a new one comes in but as I mentioned before I can't create an enpoint in the mod)</li>\n</ul>\n<p>Minetest's built-in API lets me use <code>minetest.register_on_chat_message()</code> to call a function whenever a new chat message is entered. So, I just take that message and send it to my activitypub server:</p>\n<pre class=\"language-lua\" tabindex=\"0\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">new_message</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span>\n    minetest<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"action\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sending JSON data: \"</span> <span class=\"token operator\">..</span> player<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>message <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">,</span> username <span class=\"token operator\">=</span> player<span class=\"token punctuation\">,</span> groups <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"minetest\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> api_key<span class=\"token operator\">=</span><span class=\"token string\">\"temporary\"</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">local</span> json_data <span class=\"token operator\">=</span> cjson<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    minetest<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"action\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sending JSON data: \"</span> <span class=\"token operator\">..</span> json_data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">local</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://192.168.1.75:9999/api/create_message\"</span>  <span class=\"token comment\">-- Replace with your actual URL</span>\n \n    http<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        url <span class=\"token operator\">=</span> url<span class=\"token punctuation\">,</span>\n        method <span class=\"token operator\">=</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n        data <span class=\"token operator\">=</span> json_data<span class=\"token punctuation\">,</span>\n        extra_headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Content-Type:application/json\"</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">--    [\"Content-Type\"] = \"application/json\",</span>\n        <span class=\"token comment\">--    [\"Content-Length\"] = tostring(#json_data)</span>\n        <span class=\"token comment\">--}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The activitypub server will then post the message (and create the user) under the user's identity.</p>\n<p>Finally, we have to receive messages from our ActivityPub server. My solution for this was just identical to the web chat <a href=\"https://content.minetest.net/packages/heger/webchat/\">mod</a> where we'll regularly poll our server and check if there are any new messages, if there are new messages we send them directly to the in-game chat.</p>\n<pre class=\"language-lua\" tabindex=\"0\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">poll_messages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://192.168.1.75:9999/api/get_recent_messages?last_id=\"</span> <span class=\"token operator\">..</span> last_message_id\n    http<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        url <span class=\"token operator\">=</span> url<span class=\"token punctuation\">,</span>\n        method <span class=\"token operator\">=</span> <span class=\"token string\">\"GET\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>succeeded <span class=\"token keyword\">then</span>\n            <span class=\"token keyword\">local</span> messages <span class=\"token operator\">=</span> minetest<span class=\"token punctuation\">.</span><span class=\"token function\">parse_json</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> messages <span class=\"token keyword\">then</span>\n                <span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span> message <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>messages<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n                    <span class=\"token comment\">-- Check if message ID is greater than last_message_id</span>\n                    <span class=\"token keyword\">if</span> message<span class=\"token punctuation\">.</span>id <span class=\"token operator\">></span> last_message_id <span class=\"token keyword\">then</span>\n                        minetest<span class=\"token punctuation\">.</span><span class=\"token function\">chat_send_all</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ActivityPub] \"</span> <span class=\"token operator\">..</span> message<span class=\"token punctuation\">.</span>username <span class=\"token operator\">..</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">..</span> message<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span>\n                        last_message_id <span class=\"token operator\">=</span> message<span class=\"token punctuation\">.</span>id\n                    <span class=\"token keyword\">end</span>\n                <span class=\"token keyword\">end</span>\n            <span class=\"token keyword\">end</span>\n        <span class=\"token keyword\">else</span>\n            minetest<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Failed to fetch messages from ActivityPub server\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- Call the poll_messages function periodically</span>\nminetest<span class=\"token punctuation\">.</span><span class=\"token function\">register_globalstep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>dtime<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">-- Poll every 10 seconds (adjust as needed)</span>\n    <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">then</span>\n        <span class=\"token function\">poll_messages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span></code></pre>\n<p>And this is it in action:</p>\n<div class=\"video-container\">\n  <video controls=\"\">\n    <source src=\"https://tomcasavant.com/video/minetest_demo.webm\" type=\"video/webm\">\n    Your browser does not support the video tag.\n  </video>\n</div>\n<h2 id=\"issues\" tabindex=\"-1\">Issues <a class=\"header-anchor\" href=\"https://tomcasavant.com/experimenting-with-activitypub-minetest-activitypub-bridge/\">#</a></h2>\n<p>This was all to experiment with ActivityPub, but I didn't do anything to secure the server. All private keys are stored unencrypted in a sqlite database, most of the endpoints that generate users and posts are not secured by any form of authentication.</p>\n<p>I wasn't able to find much information about testing an activitypub server. I'm sure there's some way to locally run a mastodon server to test against, it feels incorrect to publicly host a website in development just to test my ActivityPub implementation.</p>\n<p><a href=\"https://github.com/TomCasavant/DynamicActivityPub\">ActivityPub Server repo</a>\n<a href=\"https://github.com/TomCasavant/MinetestActivityPub\">Minetest Mod Repo</a></p>\n",
			"date_published": "2024-03-14T00:00:00Z"
		}
		,
		{
			"id": "https://tomcasavant.com/the-problem-with-hashtags/",
			"url": "https://tomcasavant.com/the-problem-with-hashtags/",
			"title": "The Problem with Hashtags",
			"content_html": "<p>I have never been a fan of hashtags and for most of my life I've never bothered to use them.</p>\n<h1 id=\"the-problem\" tabindex=\"-1\">The Problem <a class=\"header-anchor\" href=\"https://tomcasavant.com/the-problem-with-hashtags/\">#</a></h1>\n<p>There's a number of things I dislike about hashtags and I am <a href=\"https://medium.com/endless/an-open-letter-to-people-who-use-hashtags-89fb7694c97e\">far</a> from the <a href=\"https://markwyner.medium.com/hashtag-accessibility-by-everyone-for-everyone-298667b2d891\">first</a> person to  <a href=\"https://medium.com/chris-messina/the-problem-with-the-problems-with-hashtags-35d4ba29b04d\">express problems</a> with them. But to boil down my own general sentiment: they're annoying to read and (more importantly) they're ugly.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/the-problem-with-hashtags/undefined\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/vMaQ0tXSb4-600.avif 600w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/vMaQ0tXSb4-600.webp 600w\" sizes=\"100vw\"><img alt=\"Screenshot of a poorly tagged post\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/vMaQ0tXSb4-600.png\" width=\"600\" height=\"352\"></picture></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><em>hashtag a hashtag bee hashtag should hashtag be</em></td>\n</tr>\n</tbody>\n</table>\n<p>The problem is, no matter how annoying hashtags are to look at, they continue to be incredibly useful. Mastodon (and other activitypub software) would be nearly impossible to use without the ability to discover users and posts through hashtags (despite rolling out opt-in search last year). Threads ran into a similar issue when they launched where users found it difficult to discover other users and launched <a href=\"https://www.theverge.com/2023/12/7/23992357/threads-hashtags-tags\">their version</a> of hashtags 5 months later. For now they're unavoidable.</p>\n<p>However, that doesn't mean they can't be improved. Hashtags in Threads, for example, don't include the '#' and are restricted to 1 tag per post. I don't use threads all that often and the limit of one tag per post feels pretty restrictive, but it <em>does</em> look significantly better.</p>\n<p><a href=\"https://tomcasavant.com/the-problem-with-hashtags/undefined\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/ctexdF70NB-584.avif 584w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/ctexdF70NB-584.webp 584w\" sizes=\"100vw\"><img alt=\"\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/ctexdF70NB-584.png\" width=\"584\" height=\"220\"></picture></a></p>\n<h1 id=\"the-solution\" tabindex=\"-1\">The Solution <a class=\"header-anchor\" href=\"https://tomcasavant.com/the-problem-with-hashtags/\">#</a></h1>\n<p>Over the past few months I've been working on a better solution for my mastodon experience.</p>\n<ol>\n<li>I should be able to use any number of hashtags in a single post. If I post about the Bengals with #Bengals very few people wil see it. If I instead use #NFL many people will see it but nobody who is <em>exclusively</em> interested in the Bengals will. Since mastodon is already setup this way no changes need to be made.</li>\n<li>In-line hashtags (hashtags that appear within a post's content) should <em>not</em> have the '#' symbol. This keeps posts much cleaner and makes it significantly easier to read (but they should still link to the hashtag feed)</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/the-problem-with-hashtags/undefined\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/Qzg6CJ9WNQ-600.avif 600w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/Qzg6CJ9WNQ-600.webp 600w\" sizes=\"100vw\"><img alt=\"Bee movie script with and without hashtags\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/Qzg6CJ9WNQ-600.png\" width=\"600\" height=\"328\"></picture></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><em>We can finally read the Bee movie in peace</em></td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li>Categorical hashtags (hashtags that exist solely to add metadata to a post) should not be visible. These are the tags that typically appear in the official Mastodon web UI's hashtag bar at the end of a post.</li>\n<li><em>UNLESS</em> I am following the categorical hashtag. I should <em>always</em> know why a post is appearing in my timeline (This also helps with spam, I should know exactly which tag a spam status using that causes me to see it).</li>\n<li>Editing a status should show me the tags that were removed from the post so they can be edited as well</li>\n<li>The experience should be consistent between the web-ui and the mobile experience</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><a href=\"https://tomcasavant.com/the-problem-with-hashtags/undefined\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/SAcKQrp_d7-600.avif 600w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/SAcKQrp_d7-600.webp 600w\" sizes=\"100vw\"><img alt=\"UI Result after changes\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/SAcKQrp_d7-600.png\" width=\"600\" height=\"344\"></picture></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><em>Note that #nature is visible because I follow the #nature hashtag</em></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"implementation\" tabindex=\"-1\">Implementation <a class=\"header-anchor\" href=\"https://tomcasavant.com/the-problem-with-hashtags/\">#</a></h1>\n<p>In my <a href=\"https://github.com/TomCasavant/mastodon\">fork of mastodon</a> I've implemented those changes. ActivityPub made this a lot easier because they already separate out the tags from the CREATE activity so all I needed to do was remove them from the status after the post was created/updated, using the same setup that mastodon uses to create the HashtagBar I was able to remove categorical hashtags entirely.</p>\n<p>I also created a <a href=\"https://github.com/TomCasavant/moshidon\">fork of moshidon</a>, I chose moshidon because I already use it as my primary client but also because it already has an a callout that appears when a post is in your timeline because of a hashtag you follow (4). With a few small changes I was able to fix the edit window so it requests all the tags in the original post from my server and appends them to the edit window and set it up so hashtags would render as normal URLs w/o the '#' symbol (they still link to the hashtag view).</p>\n<h1 id=\"issues\" tabindex=\"-1\">Issues <a class=\"header-anchor\" href=\"https://tomcasavant.com/the-problem-with-hashtags/\">#</a></h1>\n<p>There are a few things that as of this moment I have not figured out a good solution to.</p>\n<ol>\n<li>If I want to remove the in-line hashtags from the status before I send it out to other servers all foreign servers/clients will link my hashtags as 'https://tomkahe.com/tags/TAG' instead of linking to their own respective hashtag view. From what I've seen there are already servers that render tags like this. My best guess of what to do in this situation is to send the position in the text where tags occur alongside all the tags in the status then clients would be able to properly render them. But for now I've backed off on this point and so in-line tags will only render properly in my clients, other clients/users will still see the '#' symbol in my posts.</li>\n<li>There is no easy way to see a list of all the tags in the post in a mobile client. There are situations where you might want to see every tag a post contains and as of this moment the only way to do that is open up the status in the web view. This is not a difficult issue to fix, it would just involve modifying the client to have a dropdown view on every status you can click to see the tags but I have not implemented it yet. This is probably an issue most clients should fix as every client I've seen will happily render a status with hidden tags and they have no way of showing you which tags are present.</li>\n</ol>\n",
			"date_published": "2024-03-14T00:00:00Z"
		}
		,
		{
			"id": "https://tomcasavant.com/subjective-ranked-sorting-in-python/",
			"url": "https://tomcasavant.com/subjective-ranked-sorting-in-python/",
			"title": "Subjective Ranked Sorting in Python",
			"content_html": "<p>I was working on a project and ran into a problem where I had to rank a set of objects based on an subjective value. My initial thought was to use some sort of bracket system</p>\n<p><a href=\"https://tomcasavant.com/img/f_RuCQbNkV-552.jpeg\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/f_RuCQbNkV-552.avif 552w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/f_RuCQbNkV-552.webp 552w\" sizes=\"100vw\"><img alt=\"Ice Cream Bracket screenshot\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/f_RuCQbNkV-552.jpeg\" width=\"552\" height=\"392\"></picture></a></p>\n<p>But that doesn't fully sort out my values (Is &quot;Vanilla&quot; better than &quot;Walnut&quot;?), the next thought was writing a function to repeatedly loop through the list and compare 2 values in a round-robin sort of way. But then I realized I was just creating a sort function and we can use the existing python sort function with a slight modification to solve this</p>\n<pre class=\"language-python\" tabindex=\"0\"><code class=\"language-python\"><span class=\"token keyword\">import</span> functools\nice_cream_flavors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Chocolate\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Vanilla\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Raspberry\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Walnut\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Strawberry\"</span>x<span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">custom_sort</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    val <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Which is better '</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">}</span></span><span class=\"token string\">' or '</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>y<span class=\"token punctuation\">}</span></span><span class=\"token string\">'?\\n\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> val <span class=\"token operator\">==</span> x<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">elif</span> val <span class=\"token operator\">==</span> y<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> custom_sort<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>ice_cream_flavors<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span>functools<span class=\"token punctuation\">.</span>cmp_to_key<span class=\"token punctuation\">(</span>custom_sort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p><a href=\"https://tomcasavant.com/img/ZDhOaREPW9-500.jpeg\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/ZDhOaREPW9-500.avif 500w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/ZDhOaREPW9-500.webp 500w\" sizes=\"100vw\"><img alt=\"Ice Cream Python output screenshot\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/ZDhOaREPW9-500.jpeg\" width=\"500\" height=\"278\"></picture></a></p>\n<p>By using the <code>functools.cmp_to_key</code> function we can create a custom comparator and ask the user (me) to decide which is better between 2 values.</p>\n<p>The one caveat to the method above is that I explicitly decided that no 2 values can be equal, if I were to replace that else statement with <code>return 0</code> it would work just fine, but would not necessarily have the definitive order I am looking for and allow values in the list to have the same subjective rating.</p>\n<p>One other possible issue in this setup is that there's no way to determine <em>how much</em> one flavor is preferred over another, which might be a useful measurement and something I'll explore in a future post.</p>\n",
			"date_published": "2023-01-11T21:30:00Z"
		}
		,
		{
			"id": "https://tomcasavant.com/ketchup-cake/",
			"url": "https://tomcasavant.com/ketchup-cake/",
			"title": "Ketchup Cake",
			"content_html": "<blockquote>\n<p><font size=\"1\">Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup</font></p>\n</blockquote>\n<p>It's all around you, everywhere you turn you hear them yell</p>\n<blockquote>\n<p><font size=\"2\">Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup</font></p>\n</blockquote>\n<p>You start to run, you don't know where you're going, all you know is that you have to go</p>\n<blockquote>\n<p><font size=\"3\">Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup</font></p>\n</blockquote>\n<p>But it's following you, the incessant sounds, you start to pick up the pace</p>\n<blockquote>\n<p><font size=\"4\">Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup</font></p>\n</blockquote>\n<p>Something's not right, the sounds are getting louder. You're not running away, you're headed towards them. You try to turn but your legs refuse to listen</p>\n<blockquote>\n<p><font size=\"5\">Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup</font></p>\n</blockquote>\n<p>And then there it is. Right in front of you. You try to look away but it's too beautiful. Too stunning. All you can do is bask in its glor-</p>\n<blockquote>\n<p><font size=\"10\">Ketchup</font></p>\n</blockquote>\n<p>You awake</p>\n<p>Your mind is foggy and you have no recollection of the events in your dream</p>\n<p>You have a strong urge to get up- and you do, something is driving you forwards. You exit the bedroom and head straight for the kitchen. The cabinet is open and you start pulling out items seemingly at random. Flour. Baking Powder. Nutmeg and Ginger. Brown Sugar. A creaking sound comes from behind you. The fridge is open. The items are being pulled faster now-cream cheese, butter, eggs. And then you see it, you don't want to grab it, but it <em>feels</em> important. A tear forms in your eye as you add the bottle of ketchup to the collection</p>\n<p>Suddenly flour is everywhere as you stir and stir. &quot;Why would one need so much butter&quot; you think to yourself, but continue to mix everything into one collective mess.</p>\n<p><a href=\"https://tomcasavant.com/img/F65BaJndbr-1799.jpeg\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/F65BaJndbr-600.avif 600w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/F65BaJndbr-600.webp 600w\" sizes=\"100vw\"><img alt=\"\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/F65BaJndbr-600.jpeg\" width=\"600\" height=\"846\"></picture></a></p>\n<p>Until there's just one more thing to add. You squeeze and squeeze as streams of ketchup flow out</p>\n<p><a href=\"https://tomcasavant.com/img/wqeLc_-VSA-1799.jpeg\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/wqeLc_-VSA-600.avif 600w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/wqeLc_-VSA-600.webp 600w\" sizes=\"100vw\"><img alt=\"\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/wqeLc_-VSA-600.jpeg\" width=\"600\" height=\"1216\"></picture></a></p>\n<p>Then a momentary sense of relief. The stong tomato scents that once filled your apartment are replaced with something much sweeter as the oven bakes and bakes.</p>\n<p>It's time.</p>\n<p>You reach in and pull out something red. Too red. As if the devil himself had been mixed in. And maybe he had.</p>\n<p><a href=\"https://tomcasavant.com/img/BpQ4JmF0xl-1799.jpeg\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/BpQ4JmF0xl-600.avif 600w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/BpQ4JmF0xl-600.webp 600w\" sizes=\"100vw\"><img alt=\"\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/BpQ4JmF0xl-600.jpeg\" width=\"600\" height=\"1216\"></picture></a></p>\n<p>Your spatula is now a paintbrush as you michaelangelically spread frosting over its entirety. As if the creation would one day hang from the ceiling of the Sistine Chapel. One layer after another the once red dish is now white.</p>\n<p><a href=\"https://tomcasavant.com/img/tzI_RPTnzx-1799.jpeg\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/tzI_RPTnzx-600.avif 600w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/tzI_RPTnzx-600.webp 600w\" sizes=\"100vw\"><img alt=\"\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/tzI_RPTnzx-600.jpeg\" width=\"600\" height=\"952\"></picture></a></p>\n<blockquote>\n<p><font size=\"1\">Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup</font></p>\n</blockquote>\n<p>You hear in the back of your mind. &quot;What's that from&quot;, you wonder. The thought quickly leaves as you grab a knife. <em>Slice</em>. You slide a piece onto your plate. Fork in hand, you scoop up a chunk and slowly draw the utensil up to your mouth. As the cake lands on your tongue you close your eyes and begin to savor the taste.</p>\n<p>But something's wrong.</p>\n<p>The cake.</p>\n<p>It tastes...good.</p>\n<p>This isn't right. This isn't what you deserve.</p>\n<p>There's nothing you can do. You can't help yourself. You start to grumble.</p>\n<blockquote>\n<p><font size=\"1\">Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup</font></p>\n</blockquote>\n<p>You know what you need. You know what you want.</p>\n<blockquote>\n<p><font size=\"2\">Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup</font></p>\n</blockquote>\n<p>Your voice grows louder, you need everyone to hear.</p>\n<blockquote>\n<p><font size=\"3\">Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup</font></p>\n</blockquote>\n<p>You stand up. Your work here is done.</p>\n<blockquote>\n<p><font size=\"5\">Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup, Ketchup</font></p>\n</blockquote>\n<p><a href=\"https://tomcasavant.com/img/PfLIaLhoiU-1799.jpeg\"><picture><source type=\"image/avif\" srcset=\"https://tomcasavant.com/img/PfLIaLhoiU-600.avif 600w\" sizes=\"100vw\"><source type=\"image/webp\" srcset=\"https://tomcasavant.com/img/PfLIaLhoiU-600.webp 600w\" sizes=\"100vw\"><img alt=\"\" loading=\"lazy\" decoding=\"async\" class=\"u-photo visible\" src=\"https://tomcasavant.com/img/PfLIaLhoiU-600.jpeg\" width=\"600\" height=\"788\"></picture></a></p>\n",
			"date_published": "2023-01-05T00:00:00Z"
		}
		,
		{
			"id": "https://tomcasavant.com/markov-tweet-generator/",
			"url": "https://tomcasavant.com/markov-tweet-generator/",
			"title": "Markov Tweet Generator",
			"content_html": "<p>A <a href=\"https://en.wikipedia.org/wiki/Markov_chain\">Markov Chain</a> is a model that finds the probability of an event occurring based on the current state. It takes a large text input and develops a statistical model based on that input text.</p>\n<p>For example, if the test inputted was</p>\n<blockquote>\n<p>a dog and a frog\na cat in a hat</p>\n</blockquote>\n<p>Then when generating a sentence the model will pick a random word based on the above input. So the probability that it picks &quot;a&quot; is 40%, while the probability that it picks &quot;and&quot; is 10%. If the model picks &quot;a&quot; then the probabilities will adjust accordingly, i.e. since dog/cat/frog/hat all occur after &quot;a&quot; they are now more likely to be chosen next (instead of and/in). The model keeps following through until a sentence is created.</p>\n<p>The model below was provided with every tweet I've ever liked (~16k tweets). Feel free to click &quot;new tweet&quot; to generate another tweet.</p>\n<iframe src=\"https://twitter-markov.herokuapp.com/\" style=\"overflow:hidden;\n         height: 20em; width: 26em\"></iframe>\n",
			"date_published": "2019-12-28T00:00:00Z"
		}
		,
		{
			"id": "https://tomcasavant.com/converting-old-radio-into-bluetooth-radio/",
			"url": "https://tomcasavant.com/converting-old-radio-into-bluetooth-radio/",
			"title": "Converting Old Radio into Bluetooth Radio",
			"content_html": "<p><img src=\"https://media.githubusercontent.com/media/TomCasavant/tomcasavant.github.io/master/media/OldRadio.jpg?raw=true\" alt=\"\" title=\"The Old Radio\"></p>\n<p>Around a decade ago I purchased this old radio from a garage sale to listen to music and other radio programs. It worked well for me for a few years, but it quickly fell out of use when I got my first mp3 player. I never bothered to throw away the radio because I personally found it looked cool.</p>\n<p>Recently, after moving to a new house I decided to upgrade the old radio so I could use it as a bluetooth radio which allowed me to combine style and functionality. I've never done a project like this before so I just started by taking apart the radio to see what was inside.</p>\n<p><img src=\"https://media.githubusercontent.com/media/TomCasavant/tomcasavant.github.io/master/media/OpenedRadio.jpg?raw=true\" alt=\"\" title=\"Dissected Radio\"></p>\n<p>If found that all I really needed was the speaker from the old radio to be connected to the bluetooth receiver from a cheap bluetooth radio. So I pulled out the bluetooth receiver from the cheap radio and just rewired it inside the old radio.</p>\n<p><img src=\"https://media.githubusercontent.com/media/TomCasavant/tomcasavant.github.io/master/media/BluetoothRadioandOldRadio.jpg?raw=true\" alt=\"\" title=\"Testing the Speaker Connection\"></p>\n<p>It worked perfectly.</p>\n<p><img src=\"https://media.githubusercontent.com/media/TomCasavant/tomcasavant.github.io/master/media/FinishedRadio.jpg?raw=true\" alt=\"\" title=\"Finished Radio\"></p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/owtGvvVtp0U\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n",
			"date_published": "2019-08-25T00:00:00Z"
		}
		,
		{
			"id": "https://tomcasavant.com/a-curious-case-of-osu-financial-aid/",
			"url": "https://tomcasavant.com/a-curious-case-of-osu-financial-aid/",
			"title": "A Curious Case of OSU Financial Aid",
			"content_html": "<p>Not long ago I had to deal with the unfortunate system that is <em>Ohio State bureaucracy</em>. This is that story.</p>\n<h2 id=\"dr-e-the-premise\" tabindex=\"-1\">Dr. E: The Premise <a class=\"header-anchor\" href=\"https://tomcasavant.com/a-curious-case-of-osu-financial-aid/\">#</a></h2>\n<p><strong><em>Wednesday, October 31th 2018</em>: Midterm 2</strong></p>\n<p>It was a cold Wednesday morning and by cold I mean a cool 62°F. I was on my way to my 8 AM software algorithms course. The course was taught by a professor that I had previously had a calculus course with. I will refer to him from here on out as Dr. E. I had an awful feeling in pit of my stomach as this wasn't your typical Wednesday morning. It was the kind of morning that occurs roughly 4-6 times a semester. The typical not-so-typical Wednesday morning. The reason being that later that day I would be partaking in one of the dreadful events that all students must complete on a semi-regular basis. I was taking a midterm. More specifically, at 8PM that night I would be taking the second of two midterms for Dr. E's algorithms course. It wasn't an all too difficult course, but nevertheless the apprehension was building for the exam.</p>\n<p>That afternoon I participated in a review session whose only purpose seemed to be to make me feel worse about the upcoming exam. Despite the nervousness, I choked down a dinner and rested for an hour before the exam. Then I took the exam and a few hours it was all finished. The nervousness was replaced with regret. At least it was over.</p>\n<p>I quickly forgot about that midterm and began to think of the midterms in my other classes.</p>\n<p><strong><em>Thursday, November 29th 2018</em>: The Group Chat Awakens</strong></p>\n<p>After a month of patient waiting, the group chat for my algorithms course began to stir. Grades were being entered for Midterm 2. One by one students were describing either their satisfaction or their distaste. Until only one of use remained. Me. My grade had not been entered. I chalked it up to a mistake and just waited for the exams to be handed back the next day for my results.</p>\n<p><strong><em>Friday, November 30th 2018</em>: The Results</strong></p>\n<p>At 8AM on Friday morning I arrived for my Dr E's course. As expected Dr. E handed the midterms out at the beginning of class. I got mine back and it was perfectly average. Exactly what I expected. Sure, it wasn't great, but it was something I could definitely work with.</p>\n<p><strong><em>Monday, December 10th 2018</em>: The Final</strong></p>\n<p>At this point in the class, I was confident I would not fail the class. With some quick calculations I found that the only way I could fail this class would be to get less than 10% of the final correct and that wasn't even counting the bonus assignment Dr. E claimed he would be putting in. That didn't alleviate any anxiousness for the final that morning, but it certainly gave me hope for my success.</p>\n<p>At 8AM I took the final. It was harder than expected. It wasn't awful though and at that point all I cared about was passing my other finals and then relaxing over winter break.</p>\n<p><strong><em>Wednesday, December 19th 2018</em>: Buckeyelink Grades Updated</strong></p>\n<p>Now, if you're not an OSU student you may be a bit confused at this part. Or you may not be. I really don't know how grading works at other colleges. However, here's a bit of an explanation for the uninformed. At OSU we have two grading systems: Carmen and Buckeyelink. Carmen is used to update students with their current grades in a course. Buckeyelink is used at the end of the semester to hold the final course grades. These grades are meant to remain unchanged after the conclusion of a course and typically OSU makes it difficult to change these grades after the course has closed.</p>\n<p>On this date the course group chat began to get active again. Students were getting notifications that their Buckeyelink grades were being updated. Soon, I too got a notification. I immediately pulled out my phone and looked up my results. My final grade for the course was a C-. <em>Hm</em>. That didn't seem right. I would have needed to get less than a 30% on the final in order for my grade to drop this low (again, not including the aforementioned bonus assignment). Dr. E did not place the grades for the final exam into Carmen, so there was absolutely no way for me to verify this grade.</p>\n<p>Interestingly, many others in the course group chat seemed to be experiencing similar issues with their grades being lower than expected (what I didn't know at the time was that their grades did not drop as far as mine did - all I had known was that their grades were lower than expected). Thus we began our campaign to contact Dr. E to get answers about the final.</p>\n<p><strong><em>Thursday, December 20th 2018 - Monday, December 24 2018</em>: The Campaign for Information</strong></p>\n<p>Up until Christmas Eve, emails were sent to Dr. E trying to get information. Absolutely nobody got a reply. Eventually, the campaign died off and the era of acceptance began. I just accepted that I had done inexplicably awful on the final exam and that resulted in my grade drop.</p>\n<p>During this week I got notified by the advising office that I would not be admitted into my major due to my GPA being dropped from this class. I accepted it and moved on.</p>\n<h2 id=\"the-financial-crisis\" tabindex=\"-1\">The Financial Crisis <a class=\"header-anchor\" href=\"https://tomcasavant.com/a-curious-case-of-osu-financial-aid/\">#</a></h2>\n<p><strong><em>Monday, December 31st 2018</em>: Missing Money</strong></p>\n<p>I am fortunate enough to have most of my college education funded by scholarships. Unfortunately, when looking at my bill for the upcoming Spring semester I realized that my scholarships had not been applied. I was advised to wait until they got applied rather than trying to pay the whole thing in full and expect a refund. So that's what I did.</p>\n<p><strong><em>Monday, January 7th 2019</em>: A New Beginning</strong></p>\n<p>The Spring semester had just begun. I was waitlisted for 2 of my classes due to the fact that they were major classes and I was not a member of my major yet. One of the professors for these classes informed me that I would be automatically enrolled after the first Friday of the semester. The other professor informed me that the class was full and that I would not be enrolled. Whatever, 1 for 2 was pretty good.</p>\n<p>At this time my scholarships had still not been applied and I had just been notified that they are charging me late fees. So I took action and sent the following email to the Buckeyelink office.</p>\n<blockquote>\n<p>To: buckeyelink@osu.edu<br>\nFrom: Me</p>\n<p>My name is Tom Casavant, I'm a Sophomore at the OSU main campus.\nThe financial aid I've earned for this year has not been applied to my bill.\nI don't see any to-dos/holds that would prevent my financial aid from being applied.\nThe school keeps notifying me that they are charging me extra for not paying the fees on time.\nWhen should I expect this aid to be applied to my account, and will I still be charged extra despite the fact that the aid just hadn't been applied yet?<br>\nThanks,<br>\nTom Casavant</p>\n</blockquote>\n<p><strong><em>Tuesday, January 8th 2019</em>: The Reply</strong></p>\n<blockquote>\n<p>To: Me<br>\nFrom: buckeyelink@osu.edu</p>\n<p>Hello Tom,</p>\n<p>Thank you for contacting Buckeye Link. After reviewing the account I can see the financial aid has not disbursed to the account, resulting in a balance in the amount of REDACTED.</p>\n<p>The REDACTED Scholarship Fund, REDACTED Scholarship and REDACTED Scholarship all require Full-Time enrollment for the awards to disburse. As you are currently, enrolled in 10 Credit Hours the awards are not eligible to disburse to the account.</p>\n<p>I can see you are currently waitlisted for two courses. The Ohio State University will not bill a student for these courses in case they are not admitted into the course. If you are admitted into the course, the Statement of Account will update immediately to reflect the enrollment changes. If you are enrolled Full-Time (12 Credit Hours), the financial aid will update and disburse within 1-2 business days.</p>\n<p>If you have any additional questions, please do not hesitate to contact our office. Have a wonderful day.</p>\n<p>Sincerely,</p>\n<p>REDACTED</p>\n</blockquote>\n<p>Sweet! I just had to wait until Friday when I would get enrolled in the course. Then my financial aid will be applied and I won't have to worry about it.</p>\n<p><strong><em>Monday, January 14th 2019</em>: Waitlist? What waitlist?</strong></p>\n<blockquote>\n<p>To: Me<br>\nFrom: registrar@osu.edu</p>\n<p>Waitlist closed<br>\nDear Thomas:<br>\nYou are being removed from the waitlist for Spring 2019:<br>\nCSE 2331<br>\nCSE 2421</p>\n<p>All waitlists close after the first Friday of the semester. Any students remaining on that waitlist are removed and cannot enroll into those classes. Waitlists are not carried over in the following semester.</p>\n<p>If you have any questions, work with your academic advisor.</p>\n<p>More about waitlists: go.osu.edu/Waitlists</p>\n</blockquote>\n<p>Hold up a second. I was removed? I was told I would be automatically enrolled in the course. What just happened?</p>\n<p>To this day I still do not know why I wasn't automatically enrolled in the class I was told I would be automatically enrolled in. Maybe it was the professor's fault. Maybe I had to do something that I didn't know about. My favorite and most likely explanation for not being enrolled is that I had late fees on my account (from waiting for the financial aid) and that caused the system to just remove me from the course.</p>\n<p>Whatever the reason, I was now only enrolled in 10 credit hours. I immediately contacted the professor for the course I was told I would be enrolled in.</p>\n<p><strong><em>Tuesday, January 15th 2019</em>: The Catch 22</strong></p>\n<p>The professor responded to me the next day and informed me that I could be retroactively added to the course if I got a form signed by him and turned it into my advisor. I printed out the form, met my professor in his office, and got the form signed.</p>\n<p>Finally, all of this would be finished. All I had to do was go to the advising office and turn it in. Of course, I went straight to the Engineering advising office. They told me to go downstairs and talk to the advisors there. Those advisors told me I didn't want to go to the general Engineering advising office, I was supposed to go to the CSE advising office in a different building (admittedly, all of this is my fault, I should've gone directly to the CSE advising office). I went to the other building, only to be greeted by a sign that said they were out at lunch between 11AM - 2PM. I killed an hour or so eating lunch and went back to the advising office. This is where my problems only got worse.</p>\n<p>I entered the advising office with my form and waited roughly 15 minutes. I handed over the form. They entered in the data. Then they informed me that I couldn't enroll in the course because there was a late fee on my account. A late fee. The fee I got because I didn't pay the bill. The bill I didn't pay because I was waiting for the financial aid. The financial aid I couldn't get because I wasn't enrolled in enough classes. The classes I couldn't enroll in because I had a late fee on my account and so on. The OSU catch 22.</p>\n<p>At this point I was at a loss. I gave up. The system won. I paid the entire bill in full, got enrolled in my class, and awaited my refund. That was the end of it.</p>\n<p>Or so I thought.</p>\n<h2 id=\"there-and-back-again\" tabindex=\"-1\">There and Back Again <a class=\"header-anchor\" href=\"https://tomcasavant.com/a-curious-case-of-osu-financial-aid/\">#</a></h2>\n<p><strong><em>Tuesday, January 29th 2019</em>: Procrastination</strong></p>\n<p>Everyone procrastinates now and then. Some more than others. It's the human condition and it's what many of us do best. Procrastination, however, has the potential to cause many problems. When we procrastinate on a personal project (homework, chores...etc) it has little impact on those around us. Yet, if we procrastinate on projects that involve other people (such as group projects) it will almost assuredly cause others to struggle. Dr. E procrastinated on something that impacted others and it definitely caused issues.</p>\n<p>Tuesday began like any other day. At this point I was content, I had not thought about the 'financial crisis' since I had received my refund. Sure, my class schedule was noticeably lacking in credit hours, but what could I do about it? Tuesday afternoon I was sitting in my room when I received a Carmen notification:</p>\n<blockquote>\n<p>Assignment Graded: Final, AU18 CSE REDACTED. Your assignment Final has been graded. graded: January 29</p>\n</blockquote>\n<p>I had just been notified that Dr. E had put the grade for our final exam onto Carmen. I worriedly logged into my Carmen account expecting a very low score. I clicked on the course, and lo and behold I had received a B on my final exam. I stared at the screen while trying to mentally figure out what had happened. I got nowhere. There was no possible way my grade dropped to a C- after receiving a B on the final.</p>\n<p>After looking up Dr. E's new office I was out of the door within 15 minutes. I needed to figure out what had happened. I entered his office and the following conversation occurred (not quite word for word):</p>\n<blockquote>\n<p>Me: Excuse me, Dr. E, I noticed you just put in grades for the final exam. My grade on Carmen appears to be drastically different from my grade on buckeyelink<br>\nDr. E: Hmm, that doesn't sound right. (Dr. E then proceeds to look up my grade on Carmen and Buckeyelink)<br>\nDr. E: Yeah, those are very different<br>\nMe: Is there a reason for that?<br>\nDr. E: I don't seem to have your midterm 2, did you take it?<br>\nMe: Yes, you graded it and handed it back to me<br>\nDr. E: Oh. Well, if you bring me your midterm 2 I can get your grade updated.</p>\n</blockquote>\n<p>He didn't have a grade for my midterm 2. Luckily for me, I am a hoarder when it comes to past papers. Unfortunately for me, that midterm was back at my house which is roughly 2 hours away. I contacted my brother and got word that I could get my midterm back by the following Monday.</p>\n<p><strong><em>Tuesday, February 4th 2019</em>: The Grade Update Process</strong></p>\n<p>I retrieved my midterm from my brother Monday evening, and as such I had to wait until Tuesday to bring it to Dr. E. Early Tuesday morning, I brought the midterm to Dr. E. He acknowledged that I had, in fact, completed the midterm. Then he informed me of what the grade update process entailed. Dr. E. had to submit a grade change request to OSU. OSU would then approve the grade change request, then the grade would be updated. The process would supposedly take about a week to complete. Nevertheless, after the grade was updated my GPA would be adjusted accordingly.</p>\n<p>And so I waited. Less hopeful than usual, as things didn't usually seem to happen like they were supposed to when it involved the OSU bureaucracy.</p>\n<p><strong><em>Wednesday, February 13th 2019</em>: Late Fee Waiver Program</strong></p>\n<p>I had reached out to buckeyelink inquiring as to if I could get my late fees waived because my financial aid had been applied late. On Wednesday I received the following email informing me of my options:</p>\n<blockquote>\n<p>To: Me<br>\nFrom: buckeyelink@osu.edu</p>\n<p>Get financial coaching and have up to $200 in current spring tuition late fees waived</p>\n<p>We would like to offer you a one-time opportunity to have up to $200 in your current, spring tuition late fees waived.\nTo qualify, you must complete the following by Friday, May 3:</p>\n<ol>\n<li>Have your student account paid in full and not have previously particiapted in a late fee waiver program.</li>\n<li>Complete a 1-hour appointment with the Office of Student Life's Scarlet and Gray Financial Program, a nationally recognized peer-coaching program that assists students with managing finances.</li>\n<li>Complete a 1-hour appointment at Buckeye Link to review your My Buckeye Link account, learn how tuition charges are assessed, explore payment options, and how to read your Statement of Account.</li>\n</ol>\n<p>Interested?\nSchedule an appointment with Scarlet and Gray Financial</p>\n</blockquote>\n<p>Buckeyelink was offering to refund $200 is late fees if I attended two 1 hour meetings with two different financial consultants.</p>\n<p>With no other options, I accepted and scheduled a meeting at the earliest possible time (early March).</p>\n<p><strong><em>Thursday, February 14th 2019</em>: Retroactive Major Admittance</strong></p>\n<blockquote>\n<p>To: Me<br>\nFrom: registrar@osu.edu</p>\n<p>Dear student:\nYour academic record has been adjusted for the Autumn 2018 Term. CSE 2321 has a new grade as of Wednesday, February 13, 2019.</p>\n<p>You may view your grades in your My Buckeye Link or in your OSU Mobile app (download here).</p>\n<p>This grade change may have altered your GPA which could impact your academic standing. Contact your academic advisor if you have questions about your academic standing.</p>\n<p>This grade change may also impact your Satisfactory Academic Progress, which could impact your financial aid status. Please contact Buckeye Link to speak with a financial aid counselor if you have questions.</p>\n</blockquote>\n<p>My grade was finally updated.</p>\n<p>My GPA was also adjusted, and it was raised enough that I was able to enter the major. I went to the CSE advising office to inquire as to whether I could retroactively enter the major. My adviser did not know the answer on the spot and told me that he would confer with his boss and get back to me.</p>\n<p>Later that day I received an email from my advisor, informing me that I could and would be retroactively be added to the major.</p>\n<h2 id=\"a-financial-revival\" tabindex=\"-1\">A Financial Revival <a class=\"header-anchor\" href=\"https://tomcasavant.com/a-curious-case-of-osu-financial-aid/\">#</a></h2>\n<p><strong><em>Monday, March 4 2019</em>: The Scarlet and Gray Financial Meeting</strong></p>\n<p>Monday afternoon I attended the Scarlet and Gray Financial meeting. Scarlet and Gray Financial is a peer to peer financial mentoring organization. I met with a senior (whom I'll call Kevin) who was a little over a year older than me. I mean no disrespect to Kevin when I say that this meeting was a huge waste of an hour. Nonetheless, this meeting was a huge waste of an hour.</p>\n<p>I entered the meeting with no expectations whatsoever, and left disappointed. The meeting began with me explaining the situation you've just spent your time reading about. Kevin essentially then said that I really didn't need to be there. Kevin then said that it was his job and that I would still have to wait the whole hour. Kevin then spent the rest of the time showing me self-help books and websites that described how to retire at the age of 30. The meeting ended and Kevin signed off on my papers to allow me to move onto the second financial meeting.</p>\n<p>Later that afternoon, after the meeting, I called Buckeyelink to schedule an appointment. I gave them my information and they told me they would get back to me in the next 48 hours with a date.</p>\n<p><strong><em>Wednesday, March 6 2019</em>: Scheduling</strong></p>\n<p>Buckeyelink sent me an email saying that they had scheduled a meeting for Monday, March 11. Unfortunately that Monday was the first Monday of Spring break and I wasn't going to be on campus at that time. I reached back out to tell them it wouldn't work out, and they rescheduled for Monday, March 18.</p>\n<p><strong><em>Monday, March 18 2019</em>: The Second Financial Meeting</strong></p>\n<p>This meeting I had much higher expectations for, despite the previous meeting, as I knew this one would be with an adult who would be able to do something about my problems.</p>\n<p>I walked into the Buckeyelink financial office and met with the financial adviser. I retold my story. She immediately expressed empathy for the problem and promised to keep the meeting short. Within 15 minutes she had signed off my paper and told me that I could also waive my late housing fees (totaling up to $100) if I contacted the housing department. Perfect. This was the most successful anything had been in this entire 'adventure'. The one problem I had with this meeting is her advice to make sure this never happens again. She told me to enroll in extra courses that I intended to drop within the first week of a semester. I view this as inefficient and pointless, still I plan on doing this from here on out.</p>\n<p>I emailed housing later that afternoon. They quickly emailed back telling me that they would process the refund immediately.</p>\n<p><strong><em>Wednesday, March 20 2019</em>: A Clerical Mistake</strong></p>\n<p>I got notified that my refund was being processed for my account early Wednesday morning. I looked over my bill. The housing refund amount? $35. That didn't seem right. I, again, contacted housing and the following email chain occurred:</p>\n<blockquote>\n<p>To: housing@osu.edu<br>\nFrom: Me</p>\n<p>I was recently told I could waive my housing late fees for participating in the Scarlet and Gray late fee waiver program. Looking at my statement of account now, it looks like they waived my early arrival fee rather than my housing late-fee. Am I mistaken here, or does the program only waive early arrival fees?</p>\n<p>Thanks,\nTom Casavant</p>\n</blockquote>\n<blockquote>\n<p>To: Me<br>\nFrom: housing@osu.edu</p>\n<p>The fee was adjusted on your university account on 3/18/19.</p>\n</blockquote>\n<blockquote>\n<p>To: housing@osu.edu<br>\nFrom: Me</p>\n<p>I was just wondering if the adjusted fee is for the ‘early-arrival fee’ or if it’s for the ‘housing-late’ fee.</p>\n<p>Thanks,\nTom</p>\n</blockquote>\n<blockquote>\n<p>To: Me<br>\nFrom: housing@osu.edu</p>\n<p>It was for the late fee but I just noticed we only adjusted the amount of the early arrival fee.  I will post the rest of the adjustment later today and it should update tomorrow.  My apologies.</p>\n</blockquote>\n<blockquote>\n<p>To: housing@osu.edu<br>\nFrom: Me</p>\n<p>Sweet, thanks a lot!</p>\n</blockquote>\n<h2 id=\"conclusion\" tabindex=\"-1\">Conclusion <a class=\"header-anchor\" href=\"https://tomcasavant.com/a-curious-case-of-osu-financial-aid/\">#</a></h2>\n<p>After 6 months the course of events that began with a midterm in an algorithms course finally came to a complete* and total* conclusion.</p>\n<p>* The repercussions of these events extend into the Summer. Since I lacked credit hours in the Spring semester I have to make up some classes throughout the Summer, or else I would have to take an extra semester at the end of these 4 years.</p>\n<p>I fully concede that not all of this was the fault of the University. There were plenty of opportunities where I could've stepped in and prevented issues from happening.</p>\n<ul>\n<li>I could have talked to the Dr. E about my grade not being in Carmen</li>\n<li>I could have paid the bill in full before the late fees were applied</li>\n<li>I could have met with Dr. E during the first week of the Spring semester to get answers</li>\n<li>And yes, I could have enrolled in extra courses that I intended to drop within the first week of the semester</li>\n</ul>\n<p>That's the story.</p>\n<p>In conclusion, I hope that the description of these events that have unfolded will help others to avoid the situation I fell into and that nobody else will have to go through the unfortunate process of navigating Ohio State bureaucracy.</p>\n",
			"date_published": "2019-04-19T00:00:00Z"
		}
		,
		{
			"id": "https://tomcasavant.com/generating-heat-maps-from-gpx-files/",
			"url": "https://tomcasavant.com/generating-heat-maps-from-gpx-files/",
			"title": "Generating Heat Maps from GPX Files",
			"content_html": "<p><img src=\"https://media.githubusercontent.com/media/TomCasavant/tomcasavant.github.io/master/media/heatmap.png?raw=true\" alt=\"\" title=\"Final generated heat map\"></p>\n<p>I own a smart watch (vivosport) that tracks my runs and other activities. The watch has a built-in GPS which will track my location. All of this data eventually gets transferred to Garmin, where I can view individual activities and the results of said activities.</p>\n<h2 id=\"getting-the-garmin-activity-data\" tabindex=\"-1\">Getting the Garmin Activity Data <a class=\"header-anchor\" href=\"https://tomcasavant.com/generating-heat-maps-from-gpx-files/\">#</a></h2>\n<p>Earlier this week I became interested as to whether or not I could view all my maps as a single heat map. The search brought me to an old Garmin forums page, where I was informed that the heat map functionality had long since been removed. There were two other options I found, using Strava to generate a heat map (unfortunately, this would involve signing up for their premium summit program) or generating a heat map from a series of gpx files (gpx being the gps filetype that each activity could output). Since I didn't desire to spend any money on this project I looked into the second option.</p>\n<p>The first issue I discovered was that, for no apparent reason, Garmin would not let me download all of my gpx files in bulk. Off I went to look for a solution to that problem (I figured, that if it comes to it I could just have a macro go through and download those for me, but that seemed inefficient). The first few github repositories I discovered just didn't work. Likely because Garmin's website security had changed in the years since those repos were created. Then I discovered <a href=\"https://github.com/petergardfjall/garminexport\">garminexport</a> which turned out to be almost exactly what I wanted. The one issue was that it would go through and download every piece of data from every activity (rather than just the gpx files) but this was definitely something I could work with. It worked immediately and as such I was onto the next step.</p>\n<h2 id=\"generating-the-heat-map\" tabindex=\"-1\">Generating the Heat Map <a class=\"header-anchor\" href=\"https://tomcasavant.com/generating-heat-maps-from-gpx-files/\">#</a></h2>\n<p>This part proved to be more complex than I desired. I searched and searched until I came up with <a href=\"http://www.gpsheatmaps.com/about/\">this website</a> which claimed it would generate heat maps from gpx files. I took my gpx files and submitted it to the website. The first thing I noticed was that it only accepted ~50 files. Which was unfortunate because I had many hundreds of files. The next thing I noticed was that it had no options to display the heat map on an actual map, which is what I wanted. The website's about page said that the creator planned to overlay the heat maps onto Google maps. I contacted the creator and was informed that this project was abandoned and that there were no plans to update it. Darn.</p>\n<p>That's when I decided to just make it myself. After a bit of research I decided to use the following libraries:</p>\n<ul>\n<li><a href=\"https://github.com/tkrajina/gpxpy\">gpxpy</a> - To parse the .gpx files. (the gpx files were just glorified xml files, but this just made it easier for me)</li>\n<li><a href=\"https://github.com/pallets/click\">click</a> - A library to develop an easy to use CLI for my project. Largely because I had heard about this at a recent Open Source Club meeting and I was intrigued.</li>\n</ul>\n<p>Note that I didn't use a google maps libraries. This is because I decided the best course of action was to develop an html file with javascript functions for manipulating the heatmap. Most of the my html setup came from Google's <a href=\"https://developers.google.com/maps/documentation/javascript/examples/layer-heatmap\">Javascript API Documentation</a>.</p>\n<h3 id=\"the-code\" tabindex=\"-1\">The Code <a class=\"header-anchor\" href=\"https://tomcasavant.com/generating-heat-maps-from-gpx-files/\">#</a></h3>\n<p>The entirety of this project can be found on my github at <a href=\"https://github.com/TomCasavant/GPXtoHeatmap\">https://github.com/TomCasavant/GPXtoHeatmap</a>.</p>\n<p>The first step to this project was getting all the points from the gpx files as such:</p>\n<pre><code>import gpxpy\nimport click\nimport os\nfrom configparser import SafeConfigParser\n\ndef load_points(folder, filter):\n    &quot;&quot;&quot;Loads all gpx files into a list of points&quot;&quot;&quot;\n\n    coords = []\n    print (f&quot;Loading files with type {filter}...&quot;) #Loads files with progressbar\n    with click.progressbar(os.listdir(folder)) as bar:\n        for filename in bar:\n            if (filename.endswith(&quot;.gpx&quot;)):\n                #Verify file is a gpx file\n                gpx_file = open(f'{folder}/' + filename)\n                gpx = gpxpy.parse(gpx_file)\n                for track in gpx.tracks:\n                    if not filter or filter==track.type:\n                        for segment in track.segments:\n                            for point in segment.points:\n                            \tcoords.append([float(point.latitude), float(point.longitude)])\n\n    return (coords)\n</code></pre>\n<p>Things to note:</p>\n<ul>\n<li>The click library allows me to easily insert a progress bar into my project. The progress bar is used in place of the for loop. I could've placed this anywhere in the loop (i.e. I could've generated a progress bar for every track) but I figured it would be cleaner if I just had one progress bar for each file found.</li>\n<li>gpxpy parses the gpx file to allow me to get specific elements from the file (such as the tracks and the type)</li>\n<li>The filter variable will be used to filter based on the type of activity (if desired), activities can be anything that Garmin (or whatever company you associate with) tracks. I personally use mine to track the types 'walking', 'running', and 'cycling'.</li>\n<li>I've saved the points into a list of coordinates. These coordinates will be placed into the html file to generate the heat map.</li>\n</ul>\n<p>Next, I had to create the outline for the map. I created a separate text file for this purpose:</p>\n<pre><code>\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;title&gt;Heatmaps&lt;/title&gt;\n    &lt;style&gt;\n      /* Always set the map height explicitly to define the size of the div\n       * element that contains the map. */\n      #map {\n        height: 100%;\n      }\n      /* Optional: Makes the sample page fill the window. */\n      html, body {\n        height: 100%;\n        margin: 0;\n        padding: 0;\n      }\n      #floating-panel {\n        position: absolute;\n        top: 10px;\n        left: 25%;\n        z-index: 5;\n        background-color: #fff;\n        padding: 5px;\n        border: 1px solid #999;\n        text-align: center;\n        font-family: 'Roboto','sans-serif';\n        line-height: 30px;\n        padding-left: 10px;\n      }\n      #floating-panel {\n        background-color: #fff;\n        border: 1px solid #999;\n        left: 25%;\n        padding: 5px;\n        position: absolute;\n        top: 10px;\n        z-index: 5;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;div id=&quot;floating-panel&quot;&gt;\n      &lt;button onclick=&quot;toggleHeatmap()&quot;&gt;Toggle Heatmap&lt;/button&gt;\n      &lt;button onclick=&quot;changeGradient()&quot;&gt;Change gradient&lt;/button&gt;\n      &lt;button onclick=&quot;changeRadius()&quot;&gt;Change radius&lt;/button&gt;\n      &lt;button onclick=&quot;changeOpacity()&quot;&gt;Change opacity&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;div id=&quot;map&quot;&gt;&lt;/div&gt;\n    &lt;script&gt;\n\n      // This example requires the Visualization library. Include the libraries=visualization\n      // parameter when you first load the API. For example:\n      // &lt;script src=&quot;https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&amp;libraries=visualization&quot;&gt;\n\n      var map, heatmap;\n\n      function initMap() {\n        map = new google.maps.Map(document.getElementById('map'), {\n          zoom: 13,\n          center: {lat: 40, lng: -83},\n          mapTypeId: 'roadmap'\n        });\n\n        heatmap = new google.maps.visualization.HeatmapLayer({\n          data: getPoints(),\n          map: map,\n\t  maxIntensity: 25,\n\t  radius: 5,\n\t  opacity:.4\n        });\n      }\n\n      function toggleHeatmap() {\n        heatmap.setMap(heatmap.getMap() ? null : map);\n      }\n     function changeGradient() {\n        var gradient = [\n          'rgba(0, 255, 255, 0)',\n          'rgba(0, 255, 255, 1)',\n          'rgba(0, 191, 255, 1)',\n          'rgba(0, 127, 255, 1)',\n          'rgba(0, 63, 255, 1)',\n          'rgba(0, 0, 255, 1)',\n          'rgba(0, 0, 223, 1)',\n          'rgba(0, 0, 191, 1)',\n          'rgba(0, 0, 159, 1)',\n          'rgba(0, 0, 127, 1)',\n          'rgba(63, 0, 91, 1)',\n          'rgba(127, 0, 63, 1)',\n          'rgba(191, 0, 31, 1)',\n          'rgba(255, 0, 0, 1)'\n        ]\n        heatmap.set('gradient', heatmap.get('gradient') ? null : gradient);\n      }\n\n      function changeRadius() {\n        heatmap.set('radius', heatmap.get('radius') ? null : 1);\n      }\n\n      function changeOpacity() {\n        heatmap.set('opacity', heatmap.get('opacity') ? null : 0.2);\n      }\n\n      function getPoints() {\n        return [LIST_OF_POINTS];\n        }\n      &lt;/script&gt;\n      &lt;script async defer\n          src=&quot;https://maps.googleapis.com/maps/api/js?key=API_KEY&amp;libraries=visualization&amp;callback=initMap&quot;&gt;&lt;/script&gt;\n      &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Again, most of this file comes from Google's official documentation. It allows the user to customize their map live, in case you want to change certain aspects of it. The major value I had to change in this file was the radius. Since my heat maps were more localized, I had to decrease the radius value to 5 in order to clearly see my heatmap when zoomed in. In the INIT function, I changed where the map started, this wasn't necessary because you can move around the map when you open it. But, it made it easier to focus on where my heat map is (I may in the change where the location begins based on where the heat map is generated, but I haven't gotten around to it yet). Finally, in the getPoints() function, I have it return LIST_OF_POINTS. This value is one of the values that we'll be changing in our python file. The other value is the API key in the <code>&lt;script src=...&gt;</code> line.</p>\n<p>Finally, we have to actually generate the completed html file. We'll need a config file and back in the python file we'll define 2 more functions: one to get the outline file and one to replace the LIST_OF_POINTS variable and generate a new file:</p>\n<p>config.ini</p>\n<pre><code>[GOOGLE]\nAPI_KEY = ####YOUR_API_KEY###\n</code></pre>\n<p>heatmap.py</p>\n<pre><code>parser = SafeConfigParser()\nparser.read('config.ini')\nAPI_KEY = parser.get('GOOGLE', 'API_KEY')\n\ndef get_outline():\n    &quot;&quot;&quot;Reads in the html outline file&quot;&quot;&quot;\n    with open('map-outline.txt', 'r') as file:\n        outline = file.read()\n    return outline\n\ndef generate_html(points, file_out):\n    &quot;&quot;&quot;Generates a new html file with points&quot;&quot;&quot;\n    f = open(f&quot;output/{file_out}.html&quot;, &quot;w&quot;)\n    outline = get_outline()\n    google_points = &quot;,\\n&quot;.join([f&quot;new google.maps.LatLng({point[0]}, {point[1]})&quot; for point in points])\n    updated_content = outline.replace(&quot;LIST_OF_POINTS&quot;, google_points).replace(&quot;API_KEY&quot;, API_KEY)\n    f.write(updated_content)\n    f.close()\n</code></pre>\n<p>You can generate a google maps API key from here <a href=\"https://developers.google.com/maps/documentation/javascript/get-api-key\">https://developers.google.com/maps/documentation/javascript/get-api-key</a>.</p>\n<p>Essentially, all you need to know is that get_outline() reads in the text file containing the html/javascript, then the generate_html() function takes that outline and fills it in with the appropriate content.</p>\n<p>Then to put it all together we make our main functions.</p>\n<pre><code>@click.command()\n@click.option(&quot;--output&quot;, default=&quot;map&quot;, help=&quot;Specify the name of the output file&quot;)\n@click.option(&quot;--input&quot;, default=&quot;gpx&quot;, help=&quot;Specify an input folder&quot;)\n@click.option(&quot;--filter&quot;, default=None, help=&quot;Specify a filter type&quot;, type=click.Choice(['running', 'cycling', 'walking']))\ndef main(output, input, filter):\n    points = load_points(input, filter)\n    generate_html(points, output)\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>Click allows us to define arguments from the command line. In this program I added three options '--output', '--input', and '--filter'. Which means a user could type in the following command to generate a heat map with bike routes from a folder called gpx_files and output it to output/my_heat_map.html.\n<code>python heatmap.py --output my_heat_map --input gpx_files --filter cycling</code></p>\n<p>That's it. The heat map gets generated and can be open in your web browser where you can manipulate it to your desire. Once again, all of this code can be found on my github at <a href=\"https://github.com/TomCasavant/GPXtoHeatmap\">https://github.com/TomCasavant/GPXtoHeatmap</a>.</p>\n",
			"date_published": "2019-04-18T00:00:00Z"
		}
		,
		{
			"id": "https://tomcasavant.com/make-oh-io-2019/",
			"url": "https://tomcasavant.com/make-oh-io-2019/",
			"title": "Make OH/IO 2019",
			"content_html": "<p>Recently I had the opportunity to participate in a makeathon (a hackathon but focused on hardware) called Make OH/IO with two of my roommates, Spencer Christian (<a href=\"https://www.linkedin.com/in/spencer-christian/\">Linkedin</a>) and Kwangeon Kim.</p>\n<p><img src=\"https://media.githubusercontent.com/media/TomCasavant/tomcasavant.github.io/master/media/make19Team.jpg?raw=true\" alt=\"\" title=\"The team after 24 hours\"></p>\n<p>We wanted to make a voice activated toy that would launch marshmallows into the air (so that you could catch them in your mouth), unfortunately between the 3 of us we had little to no experience with electrical engineering. Two of us are CSE majors and the other an Aerospace engineering major.</p>\n<p>Nevertheless, we decided to see what we could accomplish. Our initial design involved creating a catapult (seen below) to launch these marshmallows. However after a brief deliberation we decided to instead use two spinning wheels to launch (we believed this would allow for better accurracy and further distances).</p>\n<p><img src=\"https://media.githubusercontent.com/media/TomCasavant/tomcasavant.github.io/master/media/catapultdesign.jpg?raw=true\" alt=\"\" title=\"Mashmallow Catapult\"></p>\n<p>After a series of successes and failures we developed a (somewhat) working prototype, seen below, where the wheels would be activated through voice control and drop a marshmallow (yes, drop, not launch).</p>\n<p><img src=\"https://media.githubusercontent.com/media/TomCasavant/tomcasavant.github.io/master/media/make19prebuilt.jpg?raw=true\" alt=\"\" title=\"Impeccable design\"></p>\n<p>Unfortunately, over the next few hours our raspberry pi microphone began to fail (and would eventually just stop working) which resulted in a loss of voice control. However, we developed a stand for the wheels to sit on which allowed the marshmallow to be (sort of) launched and that rounded out our 24 hour making marathon.</p>\n<p><img src=\"https://media.githubusercontent.com/media/TomCasavant/tomcasavant.github.io/master/media/batterypi.jpg?raw=true\" alt=\"\" title=\"It's battery powered!\"></p>\n<p><img src=\"https://media.githubusercontent.com/media/TomCasavant/tomcasavant.github.io/master/media/make19final.jpg?raw=true\" alt=\"\" title=\"Our final design\"></p>\n",
			"date_published": "2019-03-01T00:00:00Z"
		}
		,
		{
			"id": "https://tomcasavant.com/nfl-win-chain-dijkstra-s-algorithm/",
			"url": "https://tomcasavant.com/nfl-win-chain-dijkstra-s-algorithm/",
			"title": "NFL Win-Chain (Dijkstra&#39;s Algorithm)",
			"content_html": "<p>Last semester I was taking a course at OSU called Foundations of Software Engineering. Towards the end of the course we learned about different algorithms to find paths between different nodes on a graph. One such algorithm was called Dijkstra's algorithm. I wanted to experiment with this algorithm, so I decided to write a program that would create nodes for each of the 32 NFL teams and have them connected via the wins between them, i.e. if the Bengals beat the Steelers then the Bengals would have a line pointing from themselves towards the Steelers.</p>\n<p>The goal of the script was to be able to compare teams that didn't play each other during the season. For example, the Bengals and the Patriots did not play each other in the 2018 season. The shortest chain of wins between the Bengals and the Patriots was:</p>\n<blockquote>\n<p>Bengals -&gt; Colts -&gt; Redskins -&gt; Cardinals -&gt; 49ers -&gt; Lions -&gt; Patriots</p>\n</blockquote>\n<p>Essentially, the point was so that I could brag that the Bengals were better than other teams through the teams that they beat.</p>\n<p>The first step was to define the nodes themselves. I created a file called league.py and defined 2 classes, Team and League.</p>\n<p>class Team:\n&quot;&quot;&quot;A node, representing a team in a graph&quot;&quot;&quot;\ndef <strong>init</strong>(self, name):\nself.name = name\nself.wins = []\nself.seen = False</p>\n<p>def numberOfWins(self):\nself.numWins = len(self.wins)</p>\n<p>def numberOfLosses(self):\nself.numLosses = len(self.losses)</p>\n<p>class League:\n&quot;&quot;&quot; A collection of team nodes representing the league (i.e the graph of nodes)&quot;&quot;&quot;\ndef <strong>init</strong>(self):\nself.teams = []\nself.rankedTeams = []</p>\n<p>def resetSeen(self):\nfor team in self.teams:\nteam.seen = False</p>\n<p>def getWinChain(self, team1, team2):\nteam1.seen = True\nchain = [team1] + self.winChain(team1, team2)\nself.resetSeen()\nreturn chain</p>\n<p>Imagine each node as a circle on a graph with arrows pointing to the teams that they beat. The picture below shows 2 teams, the Bengals and the Steelers, each with one win against each other.</p>\n<p><img src=\"https://media.githubusercontent.com/media/TomCasavant/tomcasavant.github.io/master/media/Diagram.png?raw=true\" alt=\"\" title=\"Bengals &gt; Steelers\"></p>\n<p>After creating the classes we have to fill the league with all the teams in the NFL. I searched around and found an api called nflgame (<a href=\"https://github.com/BurntSushi/nflgame\">https://github.com/BurntSushi/nflgame</a>) that would retrieve all the data I need for this project. I then proceeded to create a file called teamCreation.py to create the teams and create an interface for the user. The first step of this file would be to create functions to retrieve the data I need and to establish the nodes.</p>\n<p>import nflgame\nfrom league import Team, League #The classes we just created</p>\n<p>teams = ['ARI','ATL','BAL','BUF','CAR','CHI','CIN','CLE','DAL','DEN','DET','GB','HOU','IND','JAX','KC','LA','MIA','MIN','NE','NO','NYG','NYJ','OAK','PHI','PIT','SEA','SF','TB','TEN','WAS', 'LAC'] #Shortened names for every team in the NFL</p>\n<p>def getData(year, weeks):\n&quot;&quot;&quot;Gets all the games from the given year&quot;&quot;&quot;\nreturn nflgame.games(year, week=weeks)</p>\n<p>def createLeague():\n&quot;&quot;&quot;Creates a league object and fills it with all the nfl teams&quot;&quot;&quot;\nleague = League()\nfor team in teams:\nleague.teams.append(Team(team))</p>\n<p>return league</p>\n<p>The next step is to set the attributes for the nodes in the graph (i.e. to read in the wins from each team).</p>\n<p>def loadLeague(league, data):\n&quot;&quot;&quot;Loads the league object with the results of all the games&quot;&quot;&quot;\nfor game in data:\nif (game.winner != None): #If the game as finished\npositionw = league.positionOfTeam(game.winner)\npositionl = league.positionOfTeam(game.loser)\nleague.teams[positionw].wins.append(league.teams[positionl])</p>\n<p>def setup():\ndata = getData(2018, range(1,17))\nleague = createLeague()\nloadLeague(league, data)\nreturn league</p>\n<p>Then we can write a function that compares two given teams in a league.</p>\n<p>def compareTeams(team1, team2, league):\n&quot;&quot;&quot;Creates a chain linking the two given teams&quot;&quot;&quot;\nteam1Pos = league.positionOfTeam(nflgame.standard_team(team1))\nteam2Pos = league.positionOfTeam(nflgame.standard_team(team2))</p>\n<p>firstTeam = league.teams[team1Pos]\nsecondTeam = league.teams[team2Pos]</p>\n<p>return league.getWinChain(firstTeam, secondTeam)</p>\n<p>Finally, we have to be able to have the user interface with this by giving the program 2 team names. So we finish it off with a main method:</p>\n<p>if <strong>name</strong> == &quot;<strong>main</strong>&quot;:</p>\n<p>data = getData(2018, range(1,17))\nleague = createLeague()\nloadLeague(league, data)\nleague.assignSOS()\nleague.rankTeams()\nwhile True:\nchain = compareTeams(raw_input(&quot;First Team: &quot;), raw_input(&quot;Second Team: &quot;), league)\nresult = &quot;&quot;\nfor t in chain:\nresult = result + t.name + &quot; -&gt; &quot;</p>\n<p>print result</p>\n<p>And there we have it, we can now officially brag that the team of your choice is better than all other teams via the transitive win property. The full code can be viewed on my github at <a href=\"https://github.com/TomCasavant/NFLWinChains\">https://github.com/TomCasavant/NFLWinChains</a></p>\n",
			"date_published": "2019-01-28T00:00:00Z"
		}
		,
		{
			"id": "https://tomcasavant.com/hack-oh-io-2018/",
			"url": "https://tomcasavant.com/hack-oh-io-2018/",
			"title": "Hack OH/IO 2018",
			"content_html": "<p>Back in November, my brother and I decided to participate in the Hack OH/IO program (<a href=\"http://hack.osu.edu/\">http://hack.osu.edu/)</a> that takes place at The Ohio State University. We started out with a plan to build a RC car out of a raspberry pi and hardware provided by the Hack OH/IO organization. Unfortunately when we arrived to the hackathon it seemed that their parts list was incorrect. They did not have engines, wheels, axels, or basically anything else that we needed to build the car. So, we had a better idea. We decided that we would purchase an RC car from Target and attach it to a raspberry pi. The end goal being that we could control the RC car over WiFi via a computer.</p>\n<p><img src=\"https://media.githubusercontent.com/media/TomCasavant/tomcasavant.github.io/master/media/20737.jpeg?raw=true\" alt=\"\" title=\"Target RC-Car (pre-destruction)\"></p>\n<p>We removed the bottom of the car and found a (rather-simple) electrical circuit connecting the motors that controlled movement back/forward as well as the motors that controlled turning left/right (interestingly, the board was mislabeled where left was actually turning right, which we found through experimentation). The Pi needed to be wired into the 4 double A batteries in order to power it without a cord, to allow for longer travel distances. After shorting out the system a few times and draining a few sets of double-A batteries it finally got wired in correctly. We then had to wire the raspberry pi's GPIO pins to the motors to allow motor control. Unfortunately, we soon discovered that the raspberry pi wasn't producing enough power to engage the various motors. This problem eventually got solved (after an arduous brainstorming session) by wiring multiple GPIO pins together on a breadboard to increase how much power could be put into the circuit.</p>\n<p><img src=\"https://media.githubusercontent.com/media/TomCasavant/tomcasavant.github.io/master/media/working-car.jpg?raw=true\" alt=\"\" title=\"A Work in Progress\"> <img src=\"http://www.tomcasavant.com/media/wired-car.jpg\" alt=\"\" title=\"Fully Connected Car\"></p>\n<p>Nearing the end of the competition, I began programming the controller system. Using a library called gpizero (<a href=\"https://gpiozero.readthedocs.io/en/stable/\">https://gpiozero.readthedocs.io/en/stable/</a>) I was able to send signals to turn GPIO pins on/off. I didn't have enough time to develop a good-looking GUI for the controller, so I ended up just using python to handle keyboard input and send it to the raspberry-pi. I experienced difficulties using certain keyboard input libraries (they wouldn't allow me to handle multiple keyboard events at once), so I just went ahead and used the Pygame library (<a href=\"https://www.pygame.org/\">https://www.pygame.org/)</a> to handle input which worked beautifully. You can view my code for this here: <a href=\"https://github.com/TomCasavant/Raspi-RCCar/blob/master/PygameController.py\">https://github.com/TomCasavant/Raspi-RCCar/blob/master/PygameController.py</a></p>\n<p>With about 15 minutes remaining, we decided that the car was as complete as it was going to get and that it was ready for judging. A video of the car running can be found below</p>\n<p><img src=\"https://media.githubusercontent.com/media/TomCasavant/tomcasavant.github.io/master/media/RCVideo.mp4?raw=true\" alt=\"\" title=\"Look at it go\">\n<img src=\"https://media.githubusercontent.com/media/TomCasavant/tomcasavant.github.io/master/media/Completed-car.jpg?raw=true\" alt=\"\" title=\"Judgment Day\"></p>\n",
			"date_published": "2019-01-26T22:37:09Z"
		}
		,
		{
			"id": "https://tomcasavant.com/superpower-generator-and-58-programming-an-alexa-skill-with-reddit-rss-feeds/",
			"url": "https://tomcasavant.com/superpower-generator-and-58-programming-an-alexa-skill-with-reddit-rss-feeds/",
			"title": "Superpower Generator&amp;#58; Programming an Alexa skill with Reddit RSS Feeds",
			"content_html": "<blockquote>\n<p>Over the past year, I've been programming Alexa skills* after I learned how to do it back in November. However, I've neglected to write a post on how to make one...until now.</p>\n</blockquote>\n<p>*The one I'm creating in this post is <a href=\"https://www.amazon.com/Tom-Casavant-Superpower-Generator/dp/B07D9WG59C/ref=sr_1_2?ie=UTF8&amp;qid=1528743025&amp;sr=8-2&amp;keywords=superpower+generator&amp;dpID=5146tPtAcML&amp;preST=_SY300_p;dp=srch\" title=\"this one\">this one</a>. I have also made the following:</p>\n<ul>\n<li><a href=\"https://www.amazon.com/Tom-Casavant-George-Bush-Impersonator/dp/B077SRD5DG/ref=sr_1_1?ie=UTF8&amp;qid=1528743281&amp;sr=8-1&amp;keywords=george+bush+impersonator&amp;dpID=71ntOVP0d7L&amp;preST=_SY300_QL70_&amp;dpSrc=srch\">George Bush Impersonator</a></li>\n<li><a href=\"https://www.amazon.com/Tom-Casavant-Copy-Cat/dp/B075845HH8/ref=sr_1_3?s=digital-skills&amp;ie=UTF8&amp;qid=1528743321&amp;sr=1-3&amp;keywords=copycat&amp;dpID=51TFkslzR%252BL&amp;preST=_SY300_QL70_&amp;dpSrc=srch\">Copy Cat</a></li>\n<li><a href=\"https://www.amazon.com/Tom-Casavant-Repeat-Me/dp/B076YJ8TBT/ref=sr_1_8?s=digital-skills&amp;ie=UTF8&amp;qid=1528743366&amp;sr=1-8&amp;keywords=repeat+me\">Repeat me</a></li>\n</ul>\n<p>First off, I'll be doing this in a virtual environment on my Windows OS. So, if you want to follow along you'll have to set up Python, followed by Virtualenv (<a href=\"https://virtualenv.pypa.io/en/stable/userguide/\">https://virtualenv.pypa.io/en/stable/userguide/</a>).</p>\n<p>Next we'll install the libraries needed for this project. Open up a command line terminal and create a virtual environment (call &quot;virtualenv venv&quot; in your desired directory) and activate the environment (call &quot;venv\\Scripts\\activate&quot;). Install the following using pip:</p>\n<ul>\n<li><a href=\"http://flask.pocoo.org\">Flask</a></li>\n<li><a href=\"https://flask-ask.readthedocs.io/en/latest/\">flask-ask</a></li>\n<li><a href=\"https://pythonhosted.org/feedparser/\">feedparser</a></li>\n</ul>\n<p>And now we can start programming...</p>\n<p>As always, we'll start with all the import statements</p>\n<p>from flask_ask import Ask, statement, question\nfrom flask import Flask, render_template\nimport feedparser\nimport random</p>\n<p>Next, we need to create the flask app:</p>\n<p>app = Flask(<strong>name</strong>)\nask = Ask(app, &quot;/&quot;)</p>\n<p>A library we imported earlier, flask-ask, allows us to create the intents for the Alexa skill. There are a few intents that Amazon requires for their Alexa skills: Launch, Fallback, Cancel, Stop, and Help. So, we'll implement those first and get them out of the way.</p>\n<p>@ask.launch\ndef new_ask():\n&quot;&quot;&quot;Returns a welcome message when skill is turned on&quot;&quot;&quot;\nwelcome = &quot;Welcome to superpower generator! Ask for help, or just ask for a superpower.&quot;\nreturn question(welcome)</p>\n<p>@ask.intent(&quot;AMAZON.CancelIntent&quot;)\ndef cancel():\n&quot;&quot;&quot;Alerts the user that you are exiting the app&quot;&quot;&quot;\nreturn statement(&quot;See you later!&quot;)</p>\n<p>@ask.intent(&quot;AMAZON.StopIntent&quot;)\ndef stop():\n&quot;&quot;&quot;Alerts the user that the skill is stopping&quot;&quot;&quot;\nreturn statement(&quot;Goodbye, this skill is shutting down&quot;)</p>\n<p>@ask.intent(&quot;AMAZON.HelpIntent&quot;)\ndef helpme():\n&quot;&quot;&quot;Returns help commands for Alexa Skill&quot;&quot;&quot;\nreturn question(&quot;Use this skill by saying Alexa give me a superpower. What would you like to do?&quot;)</p>\n<p>Keep in mind that when flask-ask returns a 'statement' then Alexa will say the statement and exit the app. When flask-ask returns a 'question' then following a statement Alexa will turn on it's microphone and wait for more user input.</p>\n<p>Finally, we will create our main function to get a superpower from <a href=\"https://www.reddit.com/r/shittysuperpowers\">https://www.reddit.com/r/shittysuperpowers</a>.</p>\n<p>@ask.intent(&quot;SuperpowerIntent&quot;)\ndef getPower():\n&quot;&quot;&quot;Gives a user a superpower from r/shittysuperpowers&quot;&quot;&quot;\nd = feedparser.parse(&quot;https://www.reddit.com/r/shittysuperpowers/.rss?limit=100&quot;)\nselection = random.randint(0,len(d['entries'])-1)\nreturn statement(d['entries'][selection]['title'])</p>\n<p>if <strong>name</strong> == '<strong>main</strong>':\napp.run(debug=True)</p>\n<p>Basically, this function takes the reddit rss feed from this subreddit (an RSS feed can be generated by adding '/.rss' to the end of any reddit address) and extracts all the entries from the sub. It generates a random number from 0 to the number of entries in the feed (minus one). It then returns the title of the random post as a statement.</p>\n<p>Now that we've written the code, we have to set up the alexa skill in the developer console at <a href=\"https://developer.amazon.com/alexa\">https://developer.amazon.com/alexa</a>. Go to that web address and click &quot;Alexa Skills Kit&quot;, and then click &quot;Start a Skill&quot;. Finally, click &quot;Create Skill&quot;.</p>\n<p>Give your skill a name go into the Invocation section and give your skill an invocation name (or the name the user will say to activate your skill).</p>\n<p>Head to the intents section of the developer console. Click the add button next to intents and create one called &quot;SuperpowerIntent&quot;. Then type in some sample utterances such as the following:</p>\n<p><img src=\"http://www.tomcasavant.com/wp-content/uploads/YuPMsym-1.png\" alt=\"\"></p>\n<p>Now we're going to head back over into our command prompt. Install a library called &quot;zappa&quot; using 'pip install zappa' (<a href=\"https://github.com/Miserlou/Zappa\">https://github.com/Miserlou/Zappa</a>). Zappa will be used to deploy the skill on AWS. After installing it run the following commands:</p>\n<p>&quot;zappa init&quot; (Follow through that process to create your zappa, I usually just choose the default selections for each option)<br>\n&quot;zappa deploy dev&quot; (This puts the skill on AWS, it will spit out a link to the skill when it finished running)</p>\n<p>if you ever need to update your skill instead of using the above command use &quot;zappa update dev&quot;</p>\n<p>Now that you have your url, go back to the developer console and select 'Endpoint' from the tabs. SELECT HTTPS (NOT AWS LAMBDA) and in the default region enter the url you were given by zappa. Save and go over into the testing grounds. If your skill works as expected go over into the launch tab and fill out all the information for your skill. (NOTE: When I tried to publish this skill the first time it was rejected because of the bad word in r/shittysuperpowers, I guess they have strict rules about that so you should watch out for it).</p>\n<p>That's it, after a day or two your skill should either be certified or they will email you a list of reasons why they didn't certify it yet.</p>\n",
			"date_published": "2018-06-11T19:46:01Z"
		}
		,
		{
			"id": "https://tomcasavant.com/slackarchiver-p-3-and-58-setting-up-your-docker/",
			"url": "https://tomcasavant.com/slackarchiver-p-3-and-58-setting-up-your-docker/",
			"title": "SlackArchiver (p.3)&amp;#58; Setting up your Docker",
			"content_html": "<p>In the previous post, we set up our database to save messages from Slack. In this final post we just need to setup our Docker (<a href=\"https://www.docker.com/\">https://www.docker.com/</a>). The reason, that we are creating a Docker, is that this will allow you to easily transfer your program to other computers without needing to go through and install all dependencies. The first thing we're going to do is setup our filesystem to make it easy to docker it:</p>\n<ol>\n<li>Create a docker-compose.yml file</li>\n<li>Create the folder &quot;slackarchiver&quot;</li>\n<li>Place the config.ini and main.py files inside the slackarchiver folder</li>\n<li>Inside the slackarchiver folder create a file called Dockerfile (note there is no file extension)</li>\n</ol>\n<p>So now your file system should look like this:</p>\n<p>MainFolder\n-docker-compose.yml\n-slackarchiver\n-config.ini\n-Dockerfile\n-main.py</p>\n<p>Now edit your docker-compose.yml file to look like this:</p>\n<p>version: &quot;3.2&quot;\nservices:\nmongodb:\nimage: mongo:3.4\nvolumes:\n- slack-volume:/data/db</p>\n<p>slackarchiver:\nbuild: ./slackarchiver</p>\n<p>volumes:\nslack-volume:</p>\n<p>The purpose of this file is to allow everything in your docker to communicate with each other. First, it creates a Mongo instance called mongodb (Make sure to specify the version so that nothing changes when mongo gets updated). This is linked to slackarchiver (your program), which is also specified inside the services section. The volumes section will allow your program to save data off of the docker, that way if your docker is restarted/turned off you can retrieve the data when it's turned on again. Now you need to edit your Dockerfile to look like this:</p>\n<p>FROM python:2\nADD main.py /</p>\n<p>ENV CONFIG config.ini\nADD config.ini</p>\n<p>RUN pip install <br>\nconfigparser <br>\npymongo <br>\nslackclient</p>\n<p>VOLUME /data/db\nCMD [&quot;python&quot;, &quot;./main.py&quot;]</p>\n<p>Your Dockerfile sets up your docker. The first thing it does is add your program into the docker, then it saves the config file as an environmental variable so that your program can easily access it. Next, it installs all the packages you need for your program to function (configparser, pymongo, slackclient). Then it sets up the volume for all the files to be saved to. Finally, it runs the program. After all this you need to change a few lines in your main.py file. First make sure to import os. Then change your main function:</p>\n<p>if <strong>name</strong>= &quot;<strong>main</strong>&quot;:\nparser = SafeConfigParser()\nparser.read(os.environ['CONFIG']) #THIS LINE CHANGED\nSLACK_API_TOKEN = parser.get('slack', 'API_TOKEN')</p>\n<p>mongo = MongoClient(&quot;mongodb&quot;) #THIS LINE CHANGED\nslack = SlackClient(SLACK_API_TOKEN)\nlog_previous_slack_data(slack, mongo)\nstart_listening(slack, mongo)</p>\n<p>There were two changes made in this function. The first was the parser.read() line, we changed this to read the location of the config file from the environment variables. Finally, we changed the MongoClient() line so that we could access the mongo instance that was started by the docker. The final step is the initiation of the docker. To do this you have to follow the following steps:</p>\n<ol>\n<li>Open a terminal and move into the project directory</li>\n<li>run &quot;docker-compose build&quot; or &quot;sudo docker-compose build&quot;</li>\n<li>run &quot;docker-compose up&quot; to run the docker</li>\n</ol>\n<p>In theory, your docker should now be up and running. To test if everything is working correctly follow these steps:</p>\n<ol>\n<li>Open a new terminal</li>\n<li>Run &quot;sudo docker ps&quot;</li>\n<li>Get the name of your docker</li>\n<li>run &quot;docker exec -it <container name=\"\"> /bin/sh&quot; where <container name=\"\"> is the name you just got.</container></container></li>\n<li>You should now be in a terminal within your docker container</li>\n<li>Run &quot;python&quot; and print out your database using pymongo to test if your program is functioning correctly</li>\n</ol>\n<p>That's that. You should be able to transfer your docker container to any other computer and run it without errors.</p>\n",
			"date_published": "2017-09-17T01:34:53Z"
		}
		,
		{
			"id": "https://tomcasavant.com/slackarchiver-p-2-and-58-setting-up-the-database/",
			"url": "https://tomcasavant.com/slackarchiver-p-2-and-58-setting-up-the-database/",
			"title": "SlackArchiver (p.2)&amp;#58; Setting up the Database",
			"content_html": "<p>In the previous post, we developed a program that can read all previous slack posts, as well as actively listen for current slack posts. Now, we need to create a new function that will take all the data it reads, and put it into a database (we'll be using Mongo as our database manager). This function is actually quite simple, it opens the database, then for every slack post it was given it will check to see if that post is already in the database. If it isn't in the database it will add it to the database. Here is that function:</p>\n<p>def insert_database(messages, client):\n&quot;&quot;&quot;Takes messages and inserts them into a database&quot;&quot;&quot;\ndatabase = client['Slack-Database']\nposts = database.posts\nfor message in messages:\nif message['type'] == 'message': #verifies the type of data received from slack\nposts.replace_one(message, message, upsert=True)\nprint &quot;Message Logged&quot;</p>\n<p>The biggest thing to note about this function is the fact that we used &quot;posts.replace_one()&quot;. This allows us to only have one copy of each unique message in our database. In order to actually have access to a database, we need a Mongo service running. This is rather simple using Docker. Using the information from this website, <a href=\"https://hub.docker.com/_/mongo/\">https://hub.docker.com/_/mongo/</a>, we can create a mongo instance by running the following command:</p>\n<p>docker run --name some-mongo -d mongo</p>\n<p>This will create a mongo instance within our docker called &quot;some-mongo&quot; (You can change that name if you'd like, but it doesn't really matter for uthe purposes of this program). Next, you need to go back and edit some of the functions from the previous part of this tutorial. The following functions should now look like these:</p>\n<p>def log_previous_slack_data(slackclient, mongoclient):\n&quot;&quot;&quot;Gets all previous messages and puts them into a mongo database&quot;&quot;&quot;\nchannels = slackclient.api_call(&quot;channels.list&quot;)['channels']\nfor channel in channels:\nhistory = slackclient.api_call(\n&quot;channels.history&quot;,\nchannel=channel['id'])\ninsert_database(history['messages'], mongoclient) ###THIS LINE CHANGED</p>\n<p>def start_listening(slackclient, mongoclient):\n&quot;&quot;&quot;Actively logs messages into a mongo database&quot;&quot;&quot;\nif slackclient.rtm_connect():\nwhile True:\nmessages = slackclient.rtm_read()\nif messages: #If anything was read\ninsert_database(messages, mongoclient) ###THIS LINE CHANGED\ntime.sleep(1)</p>\n<p>else:\nprint &quot;Unable to connect&quot;</p>\n<p>if <strong>name</strong> == &quot;<strong>main</strong>&quot;:\nparser = SafeConfigParser()\nparser.read(config.ini) #Later on this line will change slightly\nSLACK_API_TOKEN = parser.get(&quot;slack&quot;, &quot;API_TOKEN&quot;)</p>\n<p>mongo = MongoClient() #Notice how we're temporarily removing 'mongodb'\nslack = SlackClient(SLACK_API_TOKEN)</p>\n<p>log_previous_slack_data(slack, mongo)\nstart_listening(slack, mongo)</p>\n<p>Here's a quick explanation of the changes that occurred in these functions. In the first function (log_previous_slack_data()) we stopped printing the history, and instead sent all the data over to the insert_database function. A similar thing happened with the start_listening function. We stopped printing all the messages, and instead sent them over to the insert_database function. The major change occurred in the main function. Pymongo will connect to the Mongo instance by using the default settings of MongoClient(). This will change once we set up the docker. You can now test this program, to do this we'll create another function that will print out data from the database after it has been read.</p>\n<p>def print_database(client):\n&quot;&quot;&quot;Prints the content of the database&quot;&quot;&quot;\ndatabase = client['Slack-Database']\ncollection = database['posts']\nfind_all = collection.find({})\nfor document in find_all:\nprint document</p>\n<p>Finally, add print_database to your main function using &quot;print_database(mongo)&quot; and run your program. You should see every post in your database getting printed out. This concludes the database portion of the tutorial. In the next post we'll set up a docker to encapsulate the entire program.</p>\n",
			"date_published": "2017-09-16T17:57:25Z"
		}
		,
		{
			"id": "https://tomcasavant.com/slackarchiver-and-58-using-mongo-to-archive-slack-messages-featuring-and-34-docker-and-34/",
			"url": "https://tomcasavant.com/slackarchiver-and-58-using-mongo-to-archive-slack-messages-featuring-and-34-docker-and-34/",
			"title": "SlackArchiver&amp;#58; Using Mongo to archive Slack messages (Featuring &amp;#34;Docker&amp;#34;)",
			"content_html": "<p>The purpose of this program is to read messages from Slack (<a href=\"https://slack.com/\">https://slack.com/</a>) and store them in a database using Mongo. We are also going to build all of this within a Docker, so that we can easily recreate the environment this program needs to run properly on other systems. Requirements:</p>\n<ul>\n<li>Install docker from <a href=\"https://docs.docker.com/engine/installation/\">https://docs.docker.com/engine/installation/</a></li>\n<li>Install docker-compose from <a href=\"https://docs.docker.com/compose/install/\">https://docs.docker.com/compose/install/</a></li>\n<li>pip install pymongo</li>\n<li>pip install ConfigParser</li>\n<li>pip install slackclient</li>\n</ul>\n<p>Make sure to install the latest version of all of the above libraries. Next we need a way to read data from our slack channels Create your main.py file and add the following imports:</p>\n<p>from ConfigParser import SafeConfigParser\nimport time\nfrom pymongo import MongoClient\nfrom slackclient import SlackClient\nimport os</p>\n<p>After importing everything you can move onto our first function &quot;log_previous_slag_data()&quot; which will go through all the past messages in all of your channels and will send those messages to be archived.</p>\n<p>def log_previous_slack_data(slackclient, mongoclient):\n&quot;&quot;&quot;Gets all previous messages and puts them into a mongo database&quot;&quot;&quot;\nchannels = slackclient.api_call(&quot;channels.list&quot;)['channels']\nfor channel in channels:\nhistory = slackclient.api_call(\n&quot;channels.history&quot;,\nchannel=channel['id'])\nprint history['messages'] #This line is only for testing purposes and we'll change it later on</p>\n<p>Very simply, this function takes 2 arguments: &quot;slackclient&quot; and &quot;mongoclient&quot; which we will create soon. They are used to communicate with the Slack API and the mongo API respectively. Using these arguments, the function reads the history of every channel in the list of channels. Then it prints out what it reads (we will later have this function automatically send them to be archived using the mongoclient) While it's nice to archive every message, a user doesn't want to run this program every time they'd like to archive new messages. So, we need a function at actively logs messages, this function will be called &quot;start_listening()&quot;.</p>\n<p>def start_listening(slackclient, mongoclient):\n&quot;&quot;&quot;Actively logs messages into a mongo database&quot;&quot;&quot;\nif slackclient.rtm_connect():\nwhile True:\nmessages = slackclient.rtm_read()\nif messages: #If anything was read\nprint messages #Again, this a temporary command, we will change it once we have our database setup\ntime.sleep(1)</p>\n<p>else:\nprint &quot;Unable to connect&quot;</p>\n<p>Now, before we move on we should probably test our two functions to see if they do anything. Make sure you create a Slack bot user (<a href=\"https://api.slack.com/bot-users\">https://api.slack.com/bot-users</a>) and get yourself an API key. Then we can run these functions to see if they work:</p>\n<p>if <strong>name</strong> == &quot;<strong>main</strong>&quot;:\nparser = SafeConfigParser()\nparser.read(config.ini) #Later on this line will change slightly\nSLACK_API_TOKEN = parser.get(&quot;slack&quot;, &quot;API_TOKEN&quot;)</p>\n<p>mongo = MongoClient(&quot;mongodb&quot;) #This'll be explained later\nslack = SlackClient(SLACK_API_TOKEN)</p>\n<p>log_previous_slack_data(slack, mongo)\nstart_listening(slack, mongo)</p>\n<p>And then you'll need to create a config.ini file as such:</p>\n<p>[slack]\nAPI_TOKEN = API_TOKEN_GOES_HERE</p>\n<p>Now you can run the function and see if your messages start printing on the screen. I'll make another post later to detail setting up your database</p>\n",
			"date_published": "2017-09-02T19:36:10Z"
		}
		,
		{
			"id": "https://tomcasavant.com/autotldr-and-58-summarizing-news-on-twitter/",
			"url": "https://tomcasavant.com/autotldr-and-58-summarizing-news-on-twitter/",
			"title": "AutoTLDR&amp;#58; Summarizing News on Twitter",
			"content_html": "<p>On Reddit, there is a bot named autotldr (<a href=\"https://www.reddit.com/user/autotldr\">https://www.reddit.com/user/autotldr</a>) who uses one of the various text summarizer websites (i.e. <a href=\"http://textsummarization.net/text-summarizer\">http://textsummarization.net/text-summarizer</a>) to simplify different news articles posted on Reddit in a few sentences. This intrigued me, so I looked into it and there is, in fact, a Python library that allows you to summarize articles very easily called sumy (https://pypi.python.org/pypi/sumy). Install with &quot;pip install sumy&quot; The Twython Library (pip install Twython) also interfaces with the Streaming API from Twitter, and API which lets me read tweets in real time. This is what we'll be using to create our AutoTLDR twitter account. Obviously, first you have to get your Twitter app credentials from <a href=\"https://dev.twitter.com/\">https://dev.twitter.com/</a> and then create your config.ini file:</p>\n<p>[twitter]\nAPI_KEY = ###API KEY HERE###\nAPI_SECRET = ###API SECRET HERE###\nACCESS_TOKEN = ###ACCESS TOKEN HERE###\nACCESS_SECRET = ###ACCESS SECRET HERE###</p>\n<p>Then onto your main.py file, we'll start with the imports:</p>\n<p>from sumy.parsers.html import HtmlParser\nfrom sumy.nlp.tokenizers import Tokenizer\nfrom sumy.summarizers.lex_rank import LexRankSummarizer as Summarizer\nfrom sumy.nlp.stemmers import Stemmer\nfrom sumy.utils import get_stop_words\nfrom ConfigParser import SafeConfigParser\nfrom twython import TwythonStreamer\nfrom twython import Twython</p>\n<p>Basically here you're just importing your necessary sumy modules, followed by your ConfigParser, and finally everything you need from your Twython library. After importing everything you can start a class for your Twython Streaming API as such:</p>\n<p>class myStreamer(TwythonStreamer):\ndef on_success(self, data):\n&quot;&quot;&quot;If data received, check if this is an original tweet from one of chosen news sources, then reply&quot;&quot;&quot;\nif 'text' in data:\ntry:\nif not data['retweeted'] and not data['in_reply_to_status_id'] and '@' not in data['text'] and not data['is_quote_status']:\nreply(data['entities']['urls'][0]['expanded_url'], data['id'], data['user']['screen_name'])\n#\tprint &quot;Responded&quot;\n#\tprint data\nexcept:\npass\ndef on_timeout(self, data):\nprint &quot;Timeout&quot;\ndef on_error(self, status_code, data):\nprint status_code</p>\n<p>The first function on_success(self, data) is what the Streamer will run whenever it is successful in retrieving data from the Twitter API. First, we check if the data received is a tweet by checking if the 'text' key is in data. Next, we verify that the tweet is not a retweet/reply/or quote. After verifying all these conditions the bot will run the reply function (we'll program this soon). The on_timeout(self, data) function is run if the Streamer is timed out (currently the bot just prints that there was a timeout, but you could insert code that restarts the Streamer). Finally, the on_error(self, status_code, data) just prints out if any other error is reached. Next, we can program our reply function like this:</p>\n<p>def reply(url, id, screen_name):\n&quot;&quot;&quot;Replies to a tweet with summary given id&quot;&quot;&quot;\n#print id\nsummary = getSummary(url, 3)\nsplit = splitText(summary, 140) #Splits text every 140 characters\nid = twitter.update_status(status=&quot;@&quot;+ screen_name + &quot; Here is a short summary of the posted link:&quot;, in_reply_to_status_id=id)['id'] #Posts initial tweet and saves ID\nfor segment in split:\n#Send tweet for every 140 characters in reply format\nid = twitter.update_status(status=segment, in_reply_to_status_id=id)['id']</p>\n<p>The reply(url, id, screen_name) function uses the Twitter Rest API (in the Twython library) to reply to the original tweet with a series of tweets about the article. First, it retrieves a summary using the url from the tweet with the function getSummary (which we will soon create). Then it splits the text every 140 characters using another function splitText (again, we will create this). Then it replies to the original tweet with &quot; Here is a short summary of the posted link:&quot;. Note: when posting a reply to a tweet you not only have to include the id with &quot;in_reply_to_status_id&quot; but you also have to tag the user with the &quot;@&quot; symbol. TO finish it off, the function loops through the sentence list in the variable 'split' and replies to the previous tweet. The next two functions deal with retrieving the split sentences:</p>\n<p>LANGUAGE = &quot;english&quot;</p>\n<p>def getSummary(url, sentences):\n&quot;&quot;&quot;Gets summary of article using sumy&quot;&quot;&quot;\nparser = HtmlParser.from_url(url, Tokenizer(LANGUAGE))\nstemmer = Stemmer(LANGUAGE)</p>\n<p>summarizer = Summarizer(stemmer)\nsummarizer.stop_words = get_stop_words(LANGUAGE)\nfullText = &quot;&quot;\nfor sentence in summarizer(parser.document, sentences):\nfullText += str(sentence) + &quot; &quot;</p>\n<p>return fullText</p>\n<p>def splitText(text, n):\n&quot;&quot;&quot;Splits text every n characters&quot;&quot;&quot;\nnewText = []\nwhile text:\nnewText.append(text[:n])\ntext = text[n:]\nreturn newText</p>\n<p>The getSummary(url, sentences) function examines the url. Then it constructs a string from all of the sentences and returns that variable (fullText). The splitText function will take the string and break it into sentences of 'n' length. In our case, it splits every 140 characters. We finish the program off by calling all of the important functions:</p>\n<p>if <strong>name</strong> == '<strong>main</strong>':\nparser = SafeConfigParser()\nparser.read(&quot;config.ini&quot;)\nAPI_KEY = parser.get('twitter', 'API_KEY')\nAPI_SECRET = parser.get('twitter', 'API_SECRET')\nACCESS_TOKEN = parser.get('twitter', 'ACCESS_TOKEN')\nACCESS_SECRET = parser.get('twitter', 'ACCESS_SECRET')</p>\n<p>twitter = Twython(API_KEY, API_SECRET, ACCESS_TOKEN, ACCESS_SECRET)\nstream = myStreamer(API_KEY, API_SECRET, ACCESS_TOKEN, ACCESS_SECRET)\nstream.statuses.filter(follow=['5392522', '612473', '5402612','742143','5741722'], filter_level='low') #Reads from certain Twitter Accounts (@NPR, @BBC, @BBCNews...)</p>\n<p>First, we obtain the API keys from our config file using SafeConfigParser, then we create a twitter instance and a streamer instance. The Streamer uses the &quot;follow=&quot; argument to follow certain accounts. You can obtain these id's using your own code, but I found it much easier to just go to <a href=\"http://mytwitterid.com/\">http://mytwitterid.com/</a> and enter the username of the account you'd like the bot to keep track of. In my case, I followed NPR, BBC, and BBCNews (as well as a few others I can't remember off the top of my head). Now you can run your program in the background (if you're on a UNIX system) using &quot;nohup python main.py &amp;&quot;. My twitter account is currently active here: <a href=\"https://twitter.com/auto_tldr\">https://twitter.com/auto_tldr</a> (@auto_tldr) You can view all this code on Github here: <a href=\"https://github.com/Twin802/AutoTLDR\">https://github.com/Twin802/AutoTLDR</a></p>\n",
			"date_published": "2017-04-05T23:24:20Z"
		}
		,
		{
			"id": "https://tomcasavant.com/playlist-creator-and-58-a-python-spotify-creation/",
			"url": "https://tomcasavant.com/playlist-creator-and-58-a-python-spotify-creation/",
			"title": "Playlist Creator&amp;#58; A Python Spotify Creation",
			"content_html": "<p>On my Spotify account, there is a single playlist, a playlist with 14 hours worth of music that has been accumulating for months upon months. One obvious problem with this is that I don't want to listen to all this music all the time, I should have separate playlists depending on whether I am going for a run or trying to get to sleep. That's where my python programming came in handy. A simple google search for &quot;Spotify api&quot; brought me to this page, <a href=\"https://developer.spotify.com/web-api/\">https://developer.spotify.com/web-api/</a>, which led me to the python wrapper Spotipy (<a href=\"https://spotipy.readthedocs.io/en/latest/\">https://spotipy.readthedocs.io/en/latest/</a>). Once again you have to get all your prerequisites complete before you move onto the actual programming. So head over to <a href=\"https://developer.spotify.com/my-applications/#!/applications\">https://developer.spotify.com/my-applications/#!/applications</a> to get your Spotify API keys and then install via PIP the spotipy library. After those prerequisites go ahead and create your config.ini file as such:</p>\n<p>[spotify]\nCLIENT_ID = SpotifyClientIDHere\nCLIENT_SECRET = SpotifyClientSecretHere\nREDIRECT_URI = SpotifyClientRedirectUrI</p>\n<p>Your REDIRECT_URI will be what your app redirects to when retrieving a user's authentication. In my case, I am using my website <a href=\"http://www.tomcasavant.com\">http://www.tomcasavant.com</a>. But, you can just as simply use http://localhost/ as your REDIRECT_URI. Whatever you use you must go to your app settings on Spotify and add the REDIRECT_URI to the allowed websites list. Next, you can start up a new file (mine is called main.py) to create your program. Start with all your necessary imports</p>\n<p>import spotipy\nimport spotipy.util as util\nfrom ConfigParser import SafeConfigParser</p>\n<p>Next, create a User class, and all of the following methods will be constructed inside this class unless I otherwise specify.</p>\n<p>class User():\ndef <strong>init</strong>(self):\nparser = SafeConfigParser() #Reads config.ini file for API keys\nparser.read(&quot;config.ini&quot;)\nself.CLIENT_ID = parser.get('spotify', 'CLIENT_ID')\nself.CLIENT_SECRET = parser.get('spotify', 'CLIENT_SECRET')\nself.REDIRECT_URI = parser.get('spotify', 'REDIRECT_URI')\nself.SCOPE = &quot;playlist-read-private playlist-modify-private playlist-read-collaborative playlist-modify-public&quot; #Allows program to access/edit private and public playlists\nself.sp = self.getUser() #Creates Spotify Instance\nself.id = self.sp.me()['id'] #Gets ID of authenticating user</p>\n<p>Your parser will retrieve all your private API keys. The major bit of code in this portion is the self.SCOPE variable. In order to be allowed to access all the playlists of the authenticating user, your program must announce to Spotify what it would like access to. In this case, I chose to have the ability to read all public, private, and collaborative playlists of the user followed by allowing the program to edit all these playlists. You can look at all the possible scopes here:<a href=\"https://developer.spotify.com/web-api/using-scopes/\"> https://developer.spotify.com/web-api/using-scopes/</a> just keep in mind all the scopes are separated by spaces (not by commas or anything else) The next two methods get the user authenticated with the Spotify API</p>\n<p>def getUser(self):\n&quot;&quot;&quot;Creates Spotify instance for Authenticating User&quot;&quot;&quot;\ntoken = self.getUserToken()\nsp = spotipy.Spotify(auth=token)\nsp.trace = False\nreturn sp</p>\n<p>def getUserToken(self):\n&quot;&quot;&quot;Gets authentication token from user&quot;&quot;&quot;\nname = raw_input(&quot;Please enter your username: &quot;)\ntoken = util.prompt_for_user_token(username=name,scope=self.SCOPE, client_id=self.CLIENT_ID, client_secret=self.CLIENT_SECRET, redirect_uri=self.REDIRECT_URI)\nreturn token</p>\n<p>Basically, what this code does is ask for the username of the person accessing this, then it uses util.prompt_for_user_token(...) to get the authentication token. Back in the getUser() method the program creates a Spotify instance named sp which can be accessed with self.sp. Then we get to the interesting methods in this program:</p>\n<p>def getFeatures(self, track):\n&quot;&quot;&quot;Retrieves Audio features from Spotify API for a single track&quot;&quot;&quot;\nfeatures = self.sp.audio_features(track)\nreturn features</p>\n<p>def getPlaylist(self):\n&quot;&quot;&quot;Retrieves all playlists from authenticating user, then allows user to select one&quot;&quot;&quot;\nresults = self.sp.current_user_playlists()\nfor i, item in enumerate(results['items']):\nprint (&quot;{number} {name}&quot;.format(number=i, name=item['name'].encode('utf8'))) #Prints out the name of each playlist, preceded by a number</p>\n<p>choice = input(&quot;Please choose a playlist number: &quot;)\nreturn results['items'][int(choice)]['id']</p>\n<p>def getSongs(self, playlist_id):\n&quot;&quot;&quot;Gets all songs from a chosen playlist, returns a lsit of all song ids&quot;&quot;&quot;\nresults = self.sp.user_playlist_tracks(self.id,playlist_id)\ntracks = results['items']\nsong_ids = []\nwhile results['next']:\nresults = self.sp.next(results)\ntracks.extend(results['items'])\nfor song in tracks:\nsong_ids.append(song['track']['id'])\nreturn song_ids</p>\n<p>The getFeatures(self, track) function takes an argument for a track id and returns all the features of the track. Some features include danceability, loudness, and instrumentalness. All of the features can be found here: <a href=\"https://developer.spotify.com/web-api/get-audio-features/\">https://developer.spotify.com/web-api/get-audio-features/</a> The getPlaylist(self) method goes through and prints all the playlists of the authenticating user, and the proceeds to ask the user to choose one of them as a source playlist. The getSongs(self, playlist_id) method goes through and saves the ids of all the tracks in the chosen playlist. Now we need a way to ask for all of the different preferences that the user is looking for in his/her new playlist. Which can be accomplished with a bunch of raw_input() variables as shown in this method:</p>\n<p>def getLimits(self):\n&quot;&quot;&quot;Asks user for the minimums and maximums for each condition, leaving a blank responistse will return the lowest or highest possible value. Then asks user to name the playlist&quot;&quot;&quot;\ndanceL = float(raw_input(&quot;Danceability minimum (how suitable track is for dancing 0.0-1.0): &quot;) or &quot;0&quot;)\ndanceH = float(raw_input(&quot;Danceability maximum: &quot;) or &quot;1&quot;)\nenergyL = float(raw_input(&quot;Energy minimum (intensity, or speed of a track 0.0-1.0): &quot;) or &quot;0&quot;)\nenergyH = float(raw_input(&quot;Energy maximum: &quot;) or &quot;1&quot;)\nloudL = float(raw_input(&quot;Loudness minimum (Overall loudness of a track in decibels -60-0): &quot;) or &quot;-60&quot;)\nloudH = float(raw_input(&quot;Loudness maximum: &quot;) or &quot;0&quot;)\nacousticL = float(raw_input(&quot;Acousticness minimum (measure of whether a track is acoustic 0.0-1): &quot;) or &quot;0&quot;)\nacousticH = float(raw_input(&quot;Acousticness maximum: &quot;) or &quot;1&quot;)\ninstrumentL = float(raw_input(&quot;Instrumentalness minimum (Predicts whether track contains no vocals 0.0-1.0): &quot;) or &quot;0&quot;)\ninstrumentH = float(raw_input(&quot;Instrumentalness maximum: &quot;) or &quot;1&quot;)\nlivenessL = float(raw_input(&quot;Liveness minimum (Detects presence of audience 0.0-1.0): &quot;) or &quot;0&quot;)\nlivenessH = float(raw_input(&quot;Liveness maximum: &quot;) or &quot;1&quot;)\nvalenceL = float(raw_input(&quot;Valence minimum (Positivity measurement 0.0-1.0): &quot;) or &quot;0&quot;)\nvalenceH = float(raw_input(&quot;Valence maximum: &quot;) or &quot;1&quot;)\nname = raw_input(&quot;Please name your playlist: &quot;)\nreturn [danceL, danceH, energyL, energyH, loudL, loudH, acousticL, acousticH, instrumentL, instrumentH, livenessL, livenessH, valenceL, valenceH, name]</p>\n<p>This method goes through and asks for the minimum and maximum values for each attribute (as well as a name for the new playlist). If no value is provided it just selects the lowest/highest possible value. Then it returns all of these preferences in a list. We then need a method to check the values of each song and then return the songs that fall within the limits. We also need to take all these songs and create a new playlist.</p>\n<p>def sortSongs(self, songF, danceL, danceH, energyL, energyH, loudL, loudH, acousticL, acousticH,\ninstrumentL, instrumentH, livenessL, livenessH, valenceL, valenceH):\n&quot;&quot;&quot;Returns True if all conditions are met. Conditions include: Danceability, Energy, Loudness, Acousticness, Instrumentalness, Liveness, and Valence&quot;&quot;&quot;\nif danceL &lt;= songF['danceability'] &lt;= danceH:\nif energyL &lt;= songF['energy'] &lt;= energyH:\nif loudL &lt;= songF['loudness'] &lt;= loudH:\nif acousticL &lt;= songF['acousticness'] &lt;= acousticH:\nif instrumentL &lt;= songF['instrumentalness'] &lt;= instrumentH:\nif livenessL &lt;= songF['liveness'] &lt;= livenessH:\nif valenceL &lt;= songF['valence'] &lt;= valenceH:\nreturn True</p>\n<p>def createPlaylist(self, title, tracks):\n&quot;&quot;&quot;Creates a new playlist from all tracks that met conditions&quot;&quot;&quot;\nplaylist = self.sp.user_playlist_create(self.id, title, False)\nfor track in tracks:\nself.sp.user_playlist_add_tracks(self.id, playlist['id'], [track])\nprint &quot;Playlist Created&quot;</p>\n<p>These two methods are basically self-explanatory, one verifies whether a song falls into a certain range of values. The other creates the new playlist and adds all the songs. However, one thing to note is that the second method createPlaylist(...) fills the new playlist one song at a time. The reason this was done is that Spotify only allows you a maximum of a hundred songs added at once, so I just decided to go one by one just in case the list exceeds 100 tracks. We finish this class off with our main function:</p>\n<p>def main(self):\nplaylist = self.getPlaylist()\nsongs = self.getSongs(playlist)\nnewPlaylist = []\npref = self.getLimits()\nfor song_id in songs:\nsong = self.getFeatures([song_id])\nif self.sortSongs(song[0], pref[0], pref[1], pref[2], pref[3], pref[4], pref[5], pref[6], pref[7], pref[8], pref[9], pref[10], pref[11], pref[12], pref[13]):\nnewPlaylist.append(song[0]['id'])</p>\n<p>self.createPlaylist(pref[14], newPlaylist)</p>\n<p>This function goes through and runs all the necessary methods in order, finishing it off by creating the new playlist. Now, all we need is for the program to start which can be completed very easily as such (This is outside of the class):</p>\n<p>if <strong>name</strong> == &quot;<strong>main</strong>&quot;:\nSpotifyUser = User()\nSpotifyUser.main()</p>\n<p>There's your Spotify (spotipy) app. If you wanted a playlist with high energy songs just run this script and set the minimum value for energy at something around '.7', the maximum at its default '1' and let the program do its work. All this code can be found All this code can be found on GitHub here: https://github.com/Twin802/PlaylistCreator/<a href=\"https://github.com/Twin802/PlaylistCreator/\">https://github.com/Twin802/PlaylistCreator/</a></p>\n",
			"date_published": "2017-03-30T20:25:12Z"
		}
		,
		{
			"id": "https://tomcasavant.com/cleverslack-and-58-a-cleverbot-slack-implementation/",
			"url": "https://tomcasavant.com/cleverslack-and-58-a-cleverbot-slack-implementation/",
			"title": "CleverSlack&amp;#58; A Cleverbot/Slack Implementation",
			"content_html": "<p>Cleverbot recently released an official API (that allows for 5,000 free requests every month) and with that, I wanted to experiment with this chat AI. I started using a website called Slack <a href=\"https://slack.com/\">(https://slack.com/</a>) which is basically an easy way to communicate in large groups. So, I decided to combine the two and create a bot that would talk to people in this group chat. Prior to programming, you have to create an API key for both Slack and Cleverbot which is quite easy. You can follow the tutorial for creating a bot user in Slack here: <a href=\"https://api.slack.com/bot-users\">https://api.slack.com/bot-users</a>. The Cleverbot API is located here: <a href=\"https://www.cleverbot.com/api/\">https://www.cleverbot.com/api/</a> and all you need to do there is purchase the free API package. You will also need to install several libraries. Install slackclient and cleverwrap using pip. After generating all your API keys you can start with a config file. This, I learned, is necessary when loading sensitive information online as it keeps that data private. Python has a handy built-in library called ConfigParser that easily imports this data. Name your config file config.ini and add your API keys in there as such:</p>\n<p>[slack]\nAPI_TOKEN = InsertSlackAPITokenHere\n[cleverbot]\nAPI_TOKEN = InsertCleverbotAPITokenHere</p>\n<p>After creating your config file you can move on to the actual program, name it main.py (or whatever you want). You can start with your necessary imports:</p>\n<p>from slackclient import SlackClient\nfrom cleverwrap import CleverWrap\nimport time\nfrom ConfigParser import SafeConfigParser</p>\n<p>The first two imports are the previously installed libraries slackclient and cleverwrap. The time library will be used to slow down the processing speed of the bot with its sleep method. Finally, the ConfigParser will be used to retrieve the API keys from the config.ini file. We'll start with the main function, which will connect to the Slack library and read new messages as they come in. Make sure to add your bot user to a group so it knows where to search for messages in this case I added mine to a group called #clever.</p>\n<p>def main():\nif sc.rtm_connect():\n#sc.rtm_send_message(&quot;clever&quot;, &quot;Bot starting up...&quot;) #Used to check if bot is working\nwhile True:\nfor slack_message in sc.rtm_read():\nmessage = slack_message.get(&quot;text&quot;)\nuser = slack_message.get(&quot;user&quot;)\nif not message or not user or user == &quot;cleverbot&quot;:\ncontinue\n#print &quot;Got message! %s&quot; %(message)\nsc.rtm_send_message(&quot;#clever&quot;, &quot;{text}&quot;.format(text=cleverbot(message)))</p>\n<p>time.sleep(1)</p>\n<p>else:\nprint &quot;Connection failed&quot;</p>\n<p>This function uses the Real-time messaging method from the slackclient library which allows the bot to constantly read messages as they come in. The next few lines are rather self-explanatory, if the bot is able to connect to the server then read new messages and saves the text as well as the user of the message, if the user is not the bot itself then it sends its own message with the response that it retrieves from cleverbot(message) or the next function we will make. Then it runs time.sleep(1) so it doesn't overprocess. Next, we need to retrieve a message from cleverbot, which is surprisingly easy to do:</p>\n<p>def cleverbot(text):\nresponse = cw.say(text)\nreturn response</p>\n<p>Basically, what happens is we send the Cleverbot API a piece of text and return the response. Finally, we need to initiate all of our API keys using the ConfigParser</p>\n<p>if <strong>name</strong> == &quot;<strong>main</strong>&quot;:\nparser = SafeConfigParser()\nparser.read(&quot;config.ini&quot;)\nSLACK_API_TOKEN = parser.get(&quot;slack&quot;, &quot;API_TOKEN&quot;)\nCLEVERBOT_API_TOKEN = parser.get(&quot;cleverbot&quot;,&quot;API_TOKEN&quot;)\nsc = SlackClient(SLACK_API_TOKEN)\ncw = CleverWrap(CLEVERBOT_API_TOKEN)\nmain()</p>\n<p>The parser reads using a layering system i.e. first it looks into the [slack] section to find the variable API_TOKEN and retrieves that variable. It then does that for the CLEVERBOT_API_TOKEN as well. Then it creates a SlackClient and CleverWrap instance using these API tokens. It finishes it out with the main() function which we created earlier. All this code can be found on Github here: All this code can be found on Github here: https://github.com/Twin802/CleverSlack/ During this process I also learned how to run a process in the background of your server using this command:</p>\n<blockquote>\n<p>nohup python main.py &amp;</p>\n</blockquote>\n<p>Which logs anything printed out into nohup.out if you needed to read that. Thus you have a Cleverbot instance in your group chat to talk with.</p>\n",
			"date_published": "2017-03-30T00:49:53Z"
		}
		,
		{
			"id": "https://tomcasavant.com/markov-chain-and-58-a-harry-potter-quote-tweet-generator/",
			"url": "https://tomcasavant.com/markov-chain-and-58-a-harry-potter-quote-tweet-generator/",
			"title": "Markov Chain&amp;#58; A Harry Potter Quote/Tweet Generator",
			"content_html": "<p>I was looking into different python libraries that might be interesting to use, when I encountered the markovify library (<a href=\"https://github.com/jsvine/markovify\">https://github.com/jsvine/markovify</a>). This library allows the programmer to simply create Markov chains from pieces of text.</p>\n<blockquote>\n<p>pip install markovify</p>\n</blockquote>\n<p>A Markov chain basically uses statistics to predict future words or letters based on previous words or letters. Say if I insert the word &quot;trees&quot;, the markov chain would look at this word and determine the probability of each letter occurring, then it would pick a letter let's say 'e' and determine the probabilities of other letters appearing after this letter. In this case there is a 50% chance of another 'e' occurring and a 50% chance of the letter 's' occurring. You can read more about Markov chains on Wikipedia, <a href=\"https://www.wikipedia.org/wiki/Markov_chain\">https://www.wikipedia.org/wiki/Markov_chain</a> So I decided to download the first 4 books of the Harry Potter series to see what quotes I could generate. After downloading the books, I needed a function that would pick a random book and run a Markov chain on this.</p>\n<p>import markovify\nimport random</p>\n<p>def createSentence():\ncorpus = random.choice(['Harry1.doc', 'Harry2.doc', 'Harry3.doc', 'Harry4.doc'])</p>\n<p>with open(corpus) as f:\ntext = f.read()</p>\n<p>text_model = markovify.Test(text)\nreturn (text_model.make_short_sentences(140))</p>\n<p>Some things to note about this code, is the text_model variable and the make_short_sentences(140) method. The text_model variable is set to markovify.Test(text) which just analyzes the text file to get probabilities of each word within it. When you run make_short_sentences(140) on text_model it will create your quote using the Markov chain. The 140 is the number of characters that the chain will be limited by, 140 was chosen because that's the limit on a tweet. Executing this function will return your phrase, I got &quot;No one would ever have been able to make his views heard.&quot;. With that function created, we'll need to create our Twitter bot. I have a pre-built class that I use for all my twitter bots. After you register your bot on <a href=\"http://www.apps.twitter.com\">http://www.apps.twitter.com</a> than you can type of this code:</p>\n<p>class User():\ndef <strong>init</strong>(self, app_key, app_secret, oauth_token, oauth_secret):\nself.app_key = app_key\nself.app_secret = app_secret\nself.oauth_token = oauth_token\nself.oauth_secret = oauth_secret\nself.twitter = self.Authenticate()</p>\n<p>def Authenticate(self):\n#Login to Twitter\nt = Twython(self.app_key, self.app_secret, self.oauth_token, self.oauth_secret)\nreturn t</p>\n<p>def createSentence(self):\ncorpus = random.choice(['Harry1.doc', 'Harry2.doc', 'Harry3.doc', 'Harry4.doc'])\nwith open(corpus + &quot;.txt&quot;) as f:\ntext = f.read()</p>\n<p>text_model = markovify.Text(text)</p>\n<p>return (text_model.make_short_sentence(140))</p>\n<p>def sendTweet(self):\ntweet = self.createSentence()\nself.twitter.update_status(status=tweet)</p>\n<p>This class will connect your bot to twitter, and methods such as sendTweet allow you to interface with Twitter. Finish your code off with your main function:</p>\n<p>access_key = &quot;Access Key Here&quot;\naccess_token = &quot;Access Token Here&quot;\nconsumer_key = &quot;Consumer Key Here&quot;\nconsumer_token = &quot;Consumer Token Here&quot;</p>\n<p>if <strong>name</strong> == &quot;<strong>main</strong>&quot;:\nuser = User(consumer_key, consumer_token, access_key, access_token)\nuser.sendTweet() #Creates a quote with createSentence, and updates the users status with quote</p>\n<p>Fill in your apps OAuth information and you can run the program to see how it works. You can view the program in action at <a href=\"https://www.twitter.com/HPNovels\">https://www.twitter.com/HPNovels</a> (@HPNovels).</p>\n",
			"date_published": "2017-02-22T22:57:58Z"
		}
		,
		{
			"id": "https://tomcasavant.com/twitter-profile-updater/",
			"url": "https://tomcasavant.com/twitter-profile-updater/",
			"title": "Twitter Profile Updater",
			"content_html": "<p>Recently, I have been playing around with Twython (https://twython.readthedocs.io/en/latest/), a Twitter Api wrapper for Python. I decided to write a simple script that would automatically update your profile with a new color scheme, avatar, and banner (or background). I have it changing my profile every hour. The first step was creating the App with the https://apps.twitter.com/ webpage. Which was a simple process: 1. Navigate to https://apps.twitter.com/ 2. Click on Create new App (and fill in required information) 3. View your app's page and click on 'Keys and Access Tokens' 4. Finally click 'Generate Access Keys' (At the bottom of the page) Now that we created the app, we now would have to program it. You'll need to install Twython using 'pip install twython', and then open up your preferred text editor. We will first create a class called User, in which all of our functions will be stored, then create an init function where we will authenticate the user</p>\n<p>from twython import Twython\nclass User():\ndef <strong>init</strong>(self, app_key, app_secret, oauth_token, oauth_secret):\nself.app_key = app_key\nself.app_secret = app_secret\nself.oauth_token = oauth_token\nself.oauth_secret = oauth_secret\nself.twitter = self.Authenticate()</p>\n<p>Next we will have to create our Authenticate function (in the User class), which will plug all of our keys into the Twython wrapper, thereby authenticating the app with Twitter.</p>\n<p>def Authenticate(self):\nt = Twython(self.app_key, self.app_secret, self.oauth_token, self.oauth_secret)\nreturn t</p>\n<p>Now that we have that out of the way, we have to create our 3 functions (inside our User class) that will control the profile of the user. Our first 'changeAvatar' will replace the avatar of the user, next the banner with 'changeBackground', and finally the color scheme with 'updateColors'.</p>\n<p>def changeAvatar(self, img):\nself.twitter.update_profile_image(image = img)</p>\n<p>def changeBackground(self, img):\nself.twitter.update_profile_banner_image(banner = img)</p>\n<p>def updateColors(self, randHex):\nself.twitter.update_profile(profile_link_color = randHex)</p>\n<p>This concludes our User class, next we will create our Image class (which is not necessary). Create the class, and the init function as such:</p>\n<p>class Image():\ndef <strong>init</strong>(self):\nself.images = self.collectImages()\nself.avatars = self.images[0]\nself.banners = self.images[1]</p>\n<p>The next function will look into 2 different folders (that you can create now) and grab all the image files from them. Create the folder 'Avatars' and 'Banners' in the same directory as your program. This function is still in the Image class:</p>\n<p>def collectImages(self):\navatars = []\nbanners = []\nfor img in os.listdir('Avatars'):\navatars.append(img)\nfor img in os.listdir('Banners'):\nbanners.append(img)\nreturn [avatars, banners]</p>\n<p>The final function in the Image class is the 'randProfile' function, this will choose a random photo from each of the groups (avatars, banners) and return both to be used by the User class.</p>\n<p>def randProfile(self):\navatar = self.avatars[random.randint(0, len(self.avatars) -1)]\nbanner = self.banners[random.randint(0, len(self.banners) -1)]\nreturn [avatar, banner]</p>\n<p>We than declare our Authentication keys, which you can get from your twitter apps page (https://apps.twitter.com/).</p>\n<p>access_key = &quot;####&quot;\naccess_token = &quot;####&quot;\nconsumer_key = &quot;####&quot;\nconsumer_token = &quot;####&quot;</p>\n<p>To finish out this program we need our 'main' code. Which will create our user, and change their profile.</p>\n<p>if <strong>name</strong> == '<strong>main</strong>':\nuser = User(consumer_key, consumer_token, access_key, access_token)\nimage = Image()\nnewProf = image.randProfile()\nuser.changeAvatar(open('Avatars/' + newProf[0], 'rb'))\nuser.changeBackground(open('Banners/' + newProf[1], 'rb'))\nr = random.randint(0, 255)\ng = random.randint(0, 255)\nb = random.randint(0, 255)\nrandHex = rgb2hex(r, g, b).replace('#', '')\nuser.updateColors(randHex)</p>\n<p>Now, I need to explain a few things. If you noticed at the end of the 'main' function there are 3 letters followed by a function that has not yet been imported. This is the code that randomly changes the color scheme of your profile. First it randomly chooses RGB values (or color codes), then it converts it into a Hex color code (Finally it replaces the '#' with nothing, which is required for Twython). You are going to need to install colormap with 'pip install colormap' and some users may need to follow that up with the installation of easydev, 'pip install easydev'. Now, add these imports to the top of your program, so that your import list now looks like this:</p>\n<p>from twython import Twython\nimport os\nimport random\nfrom colormap import rgb2hex</p>\n<p>And that is how you update your twitter profile. I will follow this up with another tutorial on creating a crontab so that your code runs automatically. Here is the complete code:</p>\n<p>from twython import Twython\nimport os\nimport random\nfrom colormap import rgb2hex #install colormap and easydev</p>\n<p>class User():\ndef <strong>init</strong>(self, app_key, app_secret, oauth_token, oauth_secret):\nself.app_key = app_key\nself.app_secret = app_secret\nself.oauth_token = oauth_token\nself.oauth_secret = oauth_secret\nself.twitter = self.Authenticate()</p>\n<p>def Authenticate(self):\n#Login to Twitter\nt = Twython(self.app_key, self.app_secret, self.oauth_token, self.oauth_secret)\nreturn t</p>\n<p>def changeAvatar(self, img):\n#Changes Users avatar\nself.twitter.update_profile_image(image = img)</p>\n<p>def changeBackground(self, img):\n#Changes User's banner image\nself.twitter.update_profile_banner_image(banner = img)</p>\n<p>def updateColors(self, randHex):\nself.twitter.update_profile(profile_link_color = randHex)\nclass Image():\ndef <strong>init</strong>(self):\nself.images = self.collectImages()\nself.avatars = self.images[0]\nself.banners = self.images[1]</p>\n<p>def collectImages(self):\navatars = []\nbanners = []\nfor img in os.listdir('Avatars'):\navatars.append(img)\nfor img in os.listdir('Banners'):\nbanners.append(img)\nreturn [avatars, banners]</p>\n<p>def randProfile(self):\navatar = self.avatars[random.randint(0, len(self.avatars) - 1)]\nbanner = self.banners[random.randint(0, len(self.banners) - 1)]\nreturn [avatar, banner]</p>\n<p>#Authentication Keys\naccess_key = &quot;Put your keys Here&quot;\naccess_token = &quot;Put your keys Here&quot;\nconsumer_key = &quot;Put your keys Here&quot;\nconsumer_token = &quot;Put your keys Here&quot;</p>\n<p>if <strong>name</strong> == '<strong>main</strong>':\nuser = User(consumer_key, consumer_token, access_key, access_token)\nimage = Image()\nnewProf = image.randProfile()\nuser.changeAvatar(open('Avatars/' + newProf[0], 'rb'))\nuser.changeBackground(open('Banners/' + newProf[1], 'rb'))\nr = random.randint(0, 255)\ng = random.randint(0, 255)\nb = random.randint(0, 255)\nrandHex = rgb2hex(r, g, b).replace(&quot;#&quot;, &quot;&quot;)\nuser.updateColors(randHex)</p>\n",
			"date_published": "2016-07-21T22:11:06Z"
		}
		,
		{
			"id": "https://tomcasavant.com/making-a-chrome-extension/",
			"url": "https://tomcasavant.com/making-a-chrome-extension/",
			"title": "Making a Chrome Extension",
			"content_html": "<p>The first part of making an extension for chrome is that you need the manifest file, so create a text file and name is manifest.json The manifest file basically says what your project is all about, and different things your project needs to run. Open the manifest file in a text editor and type in the &quot;manifest_version&quot;, you project name, it's description, and it's version...as such:</p>\n<blockquote>\n<p>{ &quot;manifest_version&quot; : 2, &quot;name&quot; : &quot;Pianobar Remote&quot;, &quot;description&quot; : &quot;Example chrome extension&quot;, &quot;version&quot; : &quot;1.0&quot;,</p>\n</blockquote>\n<p>Next you need to add the &quot;browser_action&quot; setting. This sets up your icon for the extension and the website that opens when you click on it.</p>\n<blockquote>\n<p>&quot;browser_action&quot;: { &quot;default_icon&quot; : &quot;icon.png&quot;, &quot;default_popup&quot; : &quot;popup.html&quot; },</p>\n</blockquote>\n<p>Finally, you need to setup the &quot;permissions&quot;. Currently we have no permissions that we need so will just put in a placeholder.</p>\n<blockquote>\n<p>&quot;permissions&quot;:[ &quot;&quot;https://ajax.googleapis.com/&quot; ] }</p>\n</blockquote>\n<p>Next we will setup a simple popup.html file.</p>\n<blockquote>\n<html> <head> <title>Pianobar Remote </title> <p>Placeholder for the Pianobar Remote</p> </head> </html>\n</blockquote>\n<p>Finally you need to open up your chrome, click on the 3 bars, go to tools, extensions and select &quot;Developer Mode&quot;. Click load unpacked extension and open the folder where your extension is stored.</p>\n",
			"date_published": "2015-04-03T17:36:00Z"
		}
		,
		{
			"id": "https://tomcasavant.com/setting-up-your-java-ide-for-and-34-dumb-and-34-phone-mobile-apps/",
			"url": "https://tomcasavant.com/setting-up-your-java-ide-for-and-34-dumb-and-34-phone-mobile-apps/",
			"title": "Setting up your Java IDE for &amp;#34;Dumb&amp;#34; phone mobile apps",
			"content_html": "<p>To begin making an app for your &quot;dumb&quot; phone you have to setup the IDE. So you need to download the following things to your computer:</p>\n<blockquote>\n<p>NetBeans - <a href=\"https://netbeans.org/downloads/index.html\">https://netbeans.org/downloads/index.html</a> Make sure you choose the one that says &quot;All&quot; so you can get Java ME Java JDK - <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a> Java ME SDK - <a href=\"http://www.oracle.com/technetwork/java/embedded/javame/javame-sdk/downloads/index.html\" title=\"http://www.oracle.com/technetwork/java/embedded/javame/javame-sdk/downloads/index.html\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p>\n</blockquote>\n<p>Next, we need to setup our NetBeans, open up the download file and go through the installation. While you're doing this you can also begin installing the JAVA ME SDK, by running it. When NetBeans finishes it's installation you have to open it up. Click &quot;tools&quot; from the top of the program, select plugins, go to the installed tab and make sure Java ME is activated. Now, click &quot;tools&quot; again and select &quot;Java Platforms&quot;. Click on the Add Platform button and then choose Java ME CLDC Platform Emulator. Navigate to the directory in which you installed the Java Me SDK, click next, and then Finish. Finally you have to click &quot;tools&quot; and go to Plugins again. Go to the Available Plugins tab, then click on the search bar. Search for Mobility and download &quot;Mobility&quot; in the category &quot;Java ME&quot;. And your IDE is now setup for Mobile Device Development.</p>\n",
			"date_published": "2015-03-12T21:26:47Z"
		}
		,
		{
			"id": "https://tomcasavant.com/programming-a-python-controller-for-pianobar-pandora-with-your-wii-remote/",
			"url": "https://tomcasavant.com/programming-a-python-controller-for-pianobar-pandora-with-your-wii-remote/",
			"title": "Programming a python Controller for Pianobar (Pandora) with your Wii Remote",
			"content_html": "<p>Recently I received a raspberry pi(<a href=\"http://www.raspberrypi.org/\">http://www.raspberrypi.org/</a>) as a Christmas gift. Soon after I was introduced to pianobar, a terminal based Pandora (<a href=\"http://pandora.com\">http://pandora.com</a>) client for linux. After awhile I began to get annoyed by having to grab the keyboard whenever I wanted to &quot;like&quot; or &quot;skip&quot; a song. Then, I saw the wii remote. I quickly googled how to use python in conjunction with the wii remote and quickly discovered the library cwiid (<a href=\"http://talk.maemo.org/showthread.php?t=60178\">http://talk.maemo.org/showthread.php?t=60178</a>). First off I went through a quick tutorial to learn how to use this library. Then I set off with my program. I began with a function to find the wii remote when you make it discoverable (By clicking 1 &amp; 2)</p>\n<p>import cwiid\nif <strong>name</strong> == &quot;<strong>main</strong>&quot;:\nloop()\ndef connectRemote():\nif not wm:\nprint &quot;Please connect your wii remote by clicking 1 &amp; 2&quot;\nwm = cwiid.Wiimote()\nreturn wm</p>\n<p>Next I began on the main loop, this would iterate through all the command options and run the correlating command:</p>\n<p>def loop():\nrunning = True\nwhile running == True:\ntry:\nwm.rpt_mode = cwiid.RPT_BTN\nclicked = wm.state['buttons']\nexcept:\nwm = connectRemote()\nif (clicked &amp; cwiid.BTN_A):\ncontrol(&quot;p&quot;, wm)\nelif (clicked &amp; cwiid.BTN_UP):\ncontrol(&quot;))&quot;, wm)\nelif (clicked &amp; cwiid.BTN_DOWN):\ncontrol(&quot;((&quot;, wm)\nelif (clicked &amp; cwiid.BTN_LEFT):\ncontrol(&quot;n&quot;, wm)\nelif (clicked &amp; cwiid.BTN_PLUS):\ncontrol(&quot;+&quot;, wm)\nelif (clicked &amp; cwiid.BTN_MINUS):\ncontrol(&quot;t&quot;, wm)</p>\n<p>Next, we need to make sure our pianobar is setup. First install it by typing</p>\n<blockquote>\n<p>sudo apt-get install pianobar</p>\n</blockquote>\n<p>Next we need to edit pianobar's settings. I had some trouble with this and had to copy the config file to my pianobar directory. Type:</p>\n<blockquote>\n<p>sudo nano /home/pi/.config/pianobar</p>\n</blockquote>\n<p>We then need to remove some of the &quot;#&quot;'s remove the &quot;#&quot; from &quot;user&quot; and &quot;password&quot; and after the &quot;=&quot; type in your pandora credentials</p>\n<blockquote>\n<p>user = username@email.com</p>\n<p>password = ***************</p>\n</blockquote>\n<p>Then remove the &quot;#&quot; from the commands that you'd like to use, such as the &quot;act_songlove&quot;</p>\n<blockquote>\n<p>act_songlove = +</p>\n</blockquote>\n<p>Now, remove the &quot;#&quot; from the line that says &quot;fifo&quot; and change that value to:</p>\n<blockquote>\n<p>fifo = /home/pi/.config/pianobar/ctl</p>\n</blockquote>\n<p>Finally, I had some trouble with the &quot;tls_fingerprint&quot; in which I was not able to play music until I changed that to:</p>\n<blockquote>\n<p>tls_fingerprint = B0A1EB460B1B6F33A1B6CB500C6523CB2E6EC946</p>\n</blockquote>\n<p>Now I had to setup my &quot;autostart&quot; station. Save and close the config file. run pianobar by typing &quot;pianobar&quot; in the terminal, you might have to type &quot;./pianobar&quot; instead. Now select one of your stations by typing in the number of the station you prefer. It now should show a 19 digit number such as:</p>\n<blockquote>\n<p>1105372639075095905</p>\n</blockquote>\n<p>Copy this down and go back to editing your config file. Change the &quot;autostart_station&quot; to equal your 19 digit number.</p>\n<blockquote>\n<p>autostart_station = 1105372639075095905</p>\n</blockquote>\n<p>Test this by running pianobar again and check if the station begins playing. To finish this setup, we need to create the fifo, navigate to your directory with the &quot;ctl&quot; file. If this file is not created then type sudo nano ctl and then ctl+x to save it. Now, create the fifo with:</p>\n<blockquote>\n<p>mkfifo ~/.config/pianobar/ctl</p>\n</blockquote>\n<p>Then I had to finish my python program, I needed a control() function.</p>\n<p>Edit your python program and add:</p>\n<p>def control(cmd, wm):\nctl = open(&quot;/home/pi/.config/pianobar/ctl&quot;, &quot;w&quot;)\nprint &gt;&gt; ctl, cmd</p>\n<p>The final step is creating an sh file to run pianobar and your program at the same time.</p>\n<p>Type: sudo nano launcher.sh</p>\n<p>Add this to your file and save:</p>\n<blockquote>\n<p>pianobar &amp; python yourprogram.py</p>\n</blockquote>\n<p>Replace yourprogram.py with the name of your program.</p>\n<p>Now type in your terminal:</p>\n<blockquote>\n<p>chmod +x launcher.sh</p>\n</blockquote>\n<p>Run your program with &quot;./launcher&quot;</p>\n",
			"date_published": "2015-03-02T23:05:28Z"
		}
		
	]
}
